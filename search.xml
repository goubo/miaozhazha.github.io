<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>统计代码行数</title>
      <link href="posts/90a5fa3e/"/>
      <url>posts/90a5fa3e/</url>
      
        <content type="html"><![CDATA[<p>使用<code>cloc</code>工具统计代码行数</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>如果你的是<code>macOS</code>,直接<code>brew install cloc</code>,</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>打开命令行</li><li>cd 到项目根路径</li><li>执行 <code>cloc ./</code></li><li>查看输出结果<br>like <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-------------------------------------------------------------------------------Language                     files          blank        comment           code-------------------------------------------------------------------------------Java                            <span class="token number">55</span>            <span class="token number">451</span>           <span class="token number">1049</span>           <span class="token number">2951</span>XML                             <span class="token number">14</span>             <span class="token number">16</span>             <span class="token number">16</span>            <span class="token number">783</span>Maven                            <span class="token number">6</span>             <span class="token number">23</span>              <span class="token number">7</span>            <span class="token number">545</span>Markdown                         <span class="token number">3</span>             <span class="token number">54</span>              <span class="token number">0</span>            <span class="token number">426</span>JSON                             <span class="token number">4</span>              <span class="token number">0</span>              <span class="token number">0</span>            <span class="token number">205</span>Go                               <span class="token number">5</span>             <span class="token number">27</span>             <span class="token number">10</span>            <span class="token number">181</span>Python                           <span class="token number">2</span>             <span class="token number">14</span>             <span class="token number">43</span>             <span class="token number">45</span>Bourne Shell                     <span class="token number">1</span>             <span class="token number">19</span>             <span class="token number">41</span>             <span class="token number">12</span>YAML                             <span class="token number">1</span>              <span class="token number">0</span>              <span class="token number">0</span>              <span class="token number">6</span>-------------------------------------------------------------------------------SUM:                            <span class="token number">91</span>            <span class="token number">604</span>           <span class="token number">1166</span>           <span class="token number">5154</span>-------------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><code>cloc</code> 同样可以统计tar包内的代码行,就像这样<code>cloc src.tar.gz</code><br>或者只统计某些文件 <code>cloc *.java *.py</code></li></ol><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><code>--exclude-dir</code> 过滤目录,一般通过配置如下<code>--exclude-dir=.idea,.git,node_modules,dist,target,test,doc</code></p><p><code>--report-file fileName</code> 输出到指定文件</p><p><code>--by-file</code> 统计每个文件的代码数</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrcpy 帮助文档</title>
      <link href="posts/4382c4d/"/>
      <url>posts/4382c4d/</url>
      
        <content type="html"><![CDATA[<p>Usage: scrcpy [options]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Options:    --always-on-top        Make scrcpy window always on <span class="token function">top</span> <span class="token punctuation">(</span>above other windows<span class="token punctuation">)</span>.        使scrcpy窗口始终位于顶部（在其他窗口上方）。    -b, --bit-rate value        Encode the video at the given bit-rate, expressed <span class="token keyword">in</span> bits/s.        Unit suffixes are supported: <span class="token string">'K'</span> <span class="token punctuation">(</span>x1000<span class="token punctuation">)</span> and <span class="token string">'M'</span> <span class="token punctuation">(</span>x1000000<span class="token punctuation">)</span>.        Default is <span class="token number">8000000</span>.        以给定的比特率（以位/秒为单位）对视频进行编码。        支持单位后缀：“ K”（x1000）和“ M”（x1000000）。        默认值为8000000。    --codec-options key<span class="token punctuation">[</span>:type<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>        Set a list of comma-separated key:type<span class="token operator">=</span>value options <span class="token keyword">for</span> the        device encoder.        The possible values <span class="token keyword">for</span> <span class="token string">'type'</span> are <span class="token string">'int'</span> <span class="token punctuation">(</span>default<span class="token punctuation">)</span>, <span class="token string">'long'</span>,        <span class="token string">'float'</span> and <span class="token string">'string'</span><span class="token builtin class-name">.</span>        The list of possible codec options is available <span class="token keyword">in</span> the        Android documentation:        <span class="token operator">&lt;</span>https://d.android.com/reference/android/media/MediaFormat<span class="token operator">&gt;</span>        设置逗号分隔的key：type <span class="token operator">=</span> value选项列表        设备编码器。        <span class="token string">'type'</span>的可能值为<span class="token string">'int'</span>（默认），<span class="token string">'long'</span>，        <span class="token string">'float'</span>和<span class="token string">'string'</span>。        可能的编解码器选项列表在        Android文档：        <span class="token operator">&lt;</span>https://d.android.com/reference/android/media/MediaFormat<span class="token operator">&gt;</span>    --crop width:height:x:y        Crop the device <span class="token function">screen</span> on the server.        The values are expressed <span class="token keyword">in</span> the device natural orientation        <span class="token punctuation">(</span>typically, portrait <span class="token keyword">for</span> a phone, landscape <span class="token keyword">for</span> a tablet<span class="token punctuation">)</span>.        Any --max-size value is computed on the cropped size.        裁剪服务器上的设备屏幕。         值以设备自然方向表示         （通常是手机的肖像，平板电脑的风景）。         任何--max-size值都是根据裁剪后的大小计算的。    --disable-screensaver        Disable screensaver <span class="token keyword">while</span> scrcpy is running.        在scrcpy运行时禁用屏幕保护程序。    --display <span class="token function">id</span>        Specify the display <span class="token function">id</span> to mirror.        指定要镜像的显示标识。        The list of possible display ids can be listed by:            adb shell dumpsys display        <span class="token punctuation">(</span>search <span class="token string">"mDisplayId="</span> <span class="token keyword">in</span> the output<span class="token punctuation">)</span>        可能的显示ID的列表可以通过以下方式列出：             adb shell dumpsys显示         （在输出中搜索“ mDisplayId <span class="token operator">=</span>“）        Default is <span class="token number">0</span>.    --encoder name        Use a specific MediaCodec encoder <span class="token punctuation">(</span>must be a H.264 encoder<span class="token punctuation">)</span>.        使用特定的MediaCodec编码器（必须是H.264编码器）。    --force-adb-forward        Do not attempt to use <span class="token string">"adb reverse"</span> to connect to the        the device.        请勿尝试使用“ adb反向”连接到装置。    --forward-all-clicks        By default, right-click triggers BACK <span class="token punctuation">(</span>or POWER on<span class="token punctuation">)</span> and        middle-click triggers <span class="token environment constant">HOME</span><span class="token builtin class-name">.</span> This option disables these        shortcuts and forward the clicks to the device instead.        默认情况下，右键单击会触发BACK（或POWER）并         单击鼠标中键可触发<span class="token environment constant">HOME</span>。 此选项禁用这些         快捷方式，然后将点击转发给设备。    -f, --fullscreen        Start <span class="token keyword">in</span> fullscreen.        以全屏模式启动。    -h, --help        Print this help.    --legacy-paste        Inject computer clipboard text as a sequence of key events        on Ctrl+v <span class="token punctuation">(</span>like MOD+Shift+v<span class="token punctuation">)</span>.        This is a workaround <span class="token keyword">for</span> some devices not behaving as        expected when setting the device clipboard programmatically.        注入计算机剪贴板文本作为一系列关键事件         在Ctrl + v上（例如MOD + Shift + v）。         对于某些无法正常运行的设备，这是一种解决方法         以编程方式设置设备剪贴板时需要。    --lock-video-orientation value        Lock video orientation to value.        Possible values are -1 <span class="token punctuation">(</span>unlocked<span class="token punctuation">)</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">2</span> and <span class="token number">3</span>.        Natural device orientation is <span class="token number">0</span>, and each increment adds a        <span class="token number">90</span> degrees rotation counterclockwise.        Default is -1 <span class="token punctuation">(</span>unlocked<span class="token punctuation">)</span>.        将视频方向锁定为价值。         可能的值为-1（未锁定），0、1、2和3。         自然设备方向为0，每个增量添加一个         逆时针旋转90度。         默认值为-1（未锁定）。    --max-fps value        Limit the frame rate of <span class="token function">screen</span> capture <span class="token punctuation">(</span>officially supported        since Android <span class="token number">10</span>, but may work on earlier versions<span class="token punctuation">)</span>.        限制屏幕捕获的帧速率（官方支持         （自Android <span class="token number">10</span>起，但可能适用于较早版本）。    -m, --max-size value        Limit both the width and height of the video to value. The        other dimension is computed so that the device aspect-ratio        is preserved.        Default is <span class="token number">0</span> <span class="token punctuation">(</span>unlimited<span class="token punctuation">)</span>.        将视频的宽度和高度都限制为value。 这         计算其他尺寸，以便设备长宽比         被保留。         默认值为0（无限制）。    -n, --no-control        Disable device control <span class="token punctuation">(</span>mirror the device <span class="token keyword">in</span> read-only<span class="token punctuation">)</span>.        禁用设备控制（以只读方式镜像设备）。    -N, --no-display        Do not display device <span class="token punctuation">(</span>only when <span class="token function">screen</span> recording is        enabled<span class="token punctuation">)</span>.        不显示设备（仅在进行屏幕录制时启用）。    --no-key-repeat        Do not forward repeated key events when a key is held down.        按住某个键时，请勿转发重复的键事件。    --no-mipmaps        If the renderer is OpenGL <span class="token number">3.0</span>+ or OpenGL ES <span class="token number">2.0</span>+, <span class="token keyword">then</span>        mipmaps are automatically generated to improve downscaling        quality. This option disables the generation of mipmaps.        如果渲染器是OpenGL <span class="token number">3.0</span>+或OpenGL ES <span class="token number">2.0</span>+，则         自动生成mipmap以改善缩小比例         质量。 此选项禁用生成Mipmap。    -p, --port port<span class="token punctuation">[</span>:port<span class="token punctuation">]</span>        Set the TCP port <span class="token punctuation">(</span>range<span class="token punctuation">)</span> used by the client to listen.        Default is <span class="token number">27183</span>:27199.        设置客户端用于侦听的TCP端口（范围）。         默认值为27183：27199。    --prefer-text        Inject alpha characters and space as text events instead of        key events.        This avoids issues when combining multiple keys to enter a        special character, but breaks the expected behavior of alpha        keys <span class="token keyword">in</span> games <span class="token punctuation">(</span>typically WASD<span class="token punctuation">)</span>.        将alpha字符和空格作为文本事件而不是文本事件         关键事件。         这样可以避免在组合多个键以输入密码时出现问题。         特殊字符，但破坏了alpha的预期行为         游戏中的按键（通常是WASD）。    --push-target path        Set the target directory <span class="token keyword">for</span> pushing files to the device by        drag <span class="token operator">&amp;</span> drop. It is passed as-is to <span class="token string">"adb push"</span><span class="token builtin class-name">.</span>        Default is <span class="token string">"/sdcard/"</span><span class="token builtin class-name">.</span>        设置目标目录，用于通过以下方式将文件推送到设备         拖放。 它按原样传递给“ adb push”。         默认值为“ / sdcard /”。    -r, --record file.mp4        Record <span class="token function">screen</span> to file.        The <span class="token function">format</span> is determined by the --record-format option <span class="token keyword">if</span>        set, or by the <span class="token function">file</span> extension <span class="token punctuation">(</span>.mp4 or .mkv<span class="token punctuation">)</span>.        将屏幕记录到文件。         格式由--record-format选项确定，如果         设置，或通过文件扩展名（.mp4或.mkv）设置。    --record-format <span class="token function">format</span>        Force recording <span class="token function">format</span> <span class="token punctuation">(</span>either mp4 or mkv<span class="token punctuation">)</span>.        强制记录格式（mp4或mkv）。    --render-driver name        Request SDL to use the given render driver <span class="token punctuation">(</span>this is just a        hint<span class="token punctuation">)</span>.        Supported names are currently <span class="token string">"direct3d"</span>, <span class="token string">"opengl"</span>,        <span class="token string">"opengles2"</span>, <span class="token string">"opengles"</span>, <span class="token string">"metal"</span> and <span class="token string">"software"</span><span class="token builtin class-name">.</span>        <span class="token operator">&lt;</span>https://wiki.libsdl.org/SDL_HINT_RENDER_DRIVER<span class="token operator">&gt;</span>        请求SDL使用给定的渲染驱动程序（这仅仅是一个暗示）。         目前支持的名称是“ direct3d”，“ opengl”，         “ opengles2”，“ opengles”，“ metal”和“软件”。         <span class="token operator">&lt;</span>https://wiki.libsdl.org/SDL_HINT_RENDER_DRIVER<span class="token operator">&gt;</span>    --render-expired-frames        By default, to minimize latency, scrcpy always renders the        last available decoded frame, and drops any previous ones.        This flag forces to render all frames, at a cost of a        possible increased latency.        默认情况下，为了最大程度地减少延迟，scrcpy始终呈现         最后一个可用的解码帧，并丢弃任何先前的帧。         该标志强制渲染所有帧，但代价是         可能会增加延迟。    --rotation value        Set the initial display rotation.        Possibles values are <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">2</span> and <span class="token number">3</span>. Each increment adds a <span class="token number">90</span>        degrees rotation counterclockwise.        设置初始显示旋转。         可能的值为0、1、2和3。每个增量加90         逆时针旋转1度。    -s, --serial serial        The device serial number. Mandatory only <span class="token keyword">if</span> several devices        are connected to adb.        设备序列号。 仅当有多个连接到adb设备时才必须    --shortcut-mod key<span class="token punctuation">[</span>+<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>        Specify the modifiers to use <span class="token keyword">for</span> scrcpy shortcuts.        Possible keys are <span class="token string">"lctrl"</span>, <span class="token string">"rctrl"</span>, <span class="token string">"lalt"</span>, <span class="token string">"ralt"</span>,        <span class="token string">"lsuper"</span> and <span class="token string">"rsuper"</span><span class="token builtin class-name">.</span>        指定用于scrcpy快捷方式的修饰符。 可能的键是“ lctrl”，“ rctrl”，“ lalt”，“ ralt”，“ lsuper”和“ rsuper”。        A shortcut can consist <span class="token keyword">in</span> several keys, separated by <span class="token string">'+'</span><span class="token builtin class-name">.</span>        Several shortcuts can be specified, separated by <span class="token string">','</span><span class="token builtin class-name">.</span>        快捷方式可以包含多个键，以“ +”号分隔。 可以指定多个快捷方式，以“，”分隔。        For example, to use either LCtrl+LAlt or LSuper <span class="token keyword">for</span> scrcpy        shortcuts, pass <span class="token string">"lctrl+lalt,lsuper"</span><span class="token builtin class-name">.</span>        例如，要将LCtrl + LAlt或LSuper用于scrcpy快捷方式，请传递“ lctrl + lalt，lsuper”。        Default is <span class="token string">"lalt,lsuper"</span> <span class="token punctuation">(</span>left-Alt or left-Super<span class="token punctuation">)</span>.        默认值为“ lalt，lsuper”（左-Alt或左-Super）。    -S, --turn-screen-off        Turn the device <span class="token function">screen</span> off immediately.        立即关闭设备屏幕。    -t, --show-touches        Enable <span class="token string">"show touches"</span> on start, restore the initial value        on exit.        It only shows physical touches <span class="token punctuation">(</span>not clicks from scrcpy<span class="token punctuation">)</span>.        在开始时启用“显示触摸”，在退出时恢复初始值。 它仅显示物理触摸（不显示来自scrcpy的点击）。    -v, --version        Print the version of scrcpy.    -V, --verbosity value        Set the log level <span class="token punctuation">(</span>debug, info, warn or error<span class="token punctuation">)</span>.        Default is info.        设置日志级别（调试，信息，警告或错误）。         默认值为info。    -w, --stay-awake        Keep the device on <span class="token keyword">while</span> scrcpy is running, when the device        is plugged in.        插入设备后，在scrcpy运行时保持设备开机。    --window-borderless        Disable window decorations <span class="token punctuation">(</span>display borderless window<span class="token punctuation">)</span>.        禁用窗口装饰（显示无边界窗口）。    --window-title text        Set a custom window title.        设置自定义窗口标题。    --window-x value        Set the initial window horizontal position.        Default is <span class="token string">"auto"</span><span class="token builtin class-name">.</span>        设置初始窗口水平位置。 默认自动    --window-y value        Set the initial window vertical position.        Default is <span class="token string">"auto"</span><span class="token builtin class-name">.</span>        设置初始窗口垂直位置。         默认为“自动”。    --window-width value        Set the initial window width.        Default is <span class="token number">0</span> <span class="token punctuation">(</span>automatic<span class="token punctuation">)</span>.        设置初始窗口宽度。         默认值为0（自动）。    --window-height value        Set the initial window width.        Default is <span class="token number">0</span> <span class="token punctuation">(</span>automatic<span class="token punctuation">)</span>.        设置初始窗口宽度。         默认值为0（自动）。         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 vert.x web 理解 http chunk 传输</title>
      <link href="posts/91532440/"/>
      <url>posts/91532440/</url>
      
        <content type="html"><![CDATA[<p>最近有个场景是后台查询大量数据返回前端,根据数据规律决定使用chunk方式流返回.</p><p>服务端使用<code>vert.x web</code>,客户端使用<a href="https://www.hutool.cn/">hutool</a>工具提供的<a href="https://www.hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil">HttpUtil</a>进行演示</p><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><p>先上基础代码</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Vertx</span> vertx <span class="token operator">=</span> <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Router</span> router <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span>vertx<span class="token punctuation">)</span><span class="token punctuation">;</span>    vertx<span class="token punctuation">.</span><span class="token function">createHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestHandler</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">10789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/test/chunk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setChunked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AtomicInteger</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vertx<span class="token punctuation">.</span><span class="token function">setPeriodic</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          vertx<span class="token punctuation">.</span><span class="token function">cancelTimer</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//服务端发送结束符</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpResponse</span> httpResponse <span class="token operator">=</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">createGet</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:10789/test/chunk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>httpResponse<span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">bodyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2021/02/06/client%E8%BF%90%E8%A1%8C1.gif" alt="client运行1"></p><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><p>服务端收到请求后,每秒输出当前时间;<br>输出10次后停止,response写出结束符.</p><p>客户端通过异步请求服务端接口,获取流<code>InputStream</code>,<br>按行读取缓冲,输出内容.</p><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>http协议连接是一种无状态连接,http的数据包分成请求头和请求体,响应包分别是响应头和响应体.<br>客户端在读取响应内容时,根据响应头时,根据<code>content-length</code>参数确认响应体的长度,读取到对应长度的内容,客户端就可以认为本次请求已经完成,已获取到所有内容.否则就一直等待服务端写出数据,直到缓冲超时.</p><h3 id="chunk传输"><a href="#chunk传输" class="headerlink" title="chunk传输"></a>chunk传输</h3><p>http请求响应时,服务端在返回请求头信息时,无法得知需要返回的数据的真实长度.一般发生在动态信息更新(sse推送),异步接口请求等情形.这时就无法使用<code>content-length</code>来通知client端.可以使用<code>transfer-encoding: chunked</code>响应头来告诉客户端这是一个长连接,client就会一直等待接收服务端的响应数据.直到收到两个换行符<code>\r\n</code>组成的结束符,才会认为本次请求已经结束.</p><blockquote><p>当客户端向服务器请求一个静态页面或者一张图片时，服务器可以很清楚的知道内容大小，然后通过Content-length消息首部字段告诉客户端需要接收多少数据。但是如果是动态页面等时，服务器是不可能预先知道内容大小，这时就可以使用Transfer-Encoding：chunk模式来传输数据了。即如果要一边产生数据，一边发给客户端，服务器就需要使用”Transfer-Encoding: chunked”这样的方式来代替Content-Length。<br>chunk编码将数据分成一块一块的发生。Chunked编码将使用若干个Chunk串连而成，由一个标明长度为0的chunk标示结束。每个Chunk分为头部和正文两部分，头部内容指定正文的字符总数（十六进制的数字）和数量单位（一般不写），正文部分就是指定长度的实际内容，两部分之间用回车换行(CRLF)隔开。在最后一个长度为0的Chunk中的内容是称为footer的内容，是一些附加的Header信息（通常可以直接忽略）。</p></blockquote><h2 id="问题-客户端断开"><a href="#问题-客户端断开" class="headerlink" title="问题:客户端断开"></a>问题:客户端断开</h2><p>当服务端还在返回,客户端已经因为自身原因断开连接,服务端还会继续发送剩余数据,因为在一次http请求通讯中,客户端无法主动通知服务器断开连接<br>修改服务端代码,给服务端添加日志观察请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">vertx<span class="token punctuation">.</span><span class="token function">setPeriodic</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出中:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vertx<span class="token punctuation">.</span><span class="token function">cancelTimer</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//服务端发送结束符</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2021/02/06/client%E8%BF%90%E8%A1%8C2.gif"></p><p>可以观察到在客户端程序停止后,服务端仍然继续返回内容,这些内容会因为链接失效进入网卡缓冲后,再被删除,会照成性能的影响.<br>如果从http本身来说,是无法感知客户端当前的状态,vert.x提供一系列回调函数用来监听请求的通讯状态.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">closeHandler</span><span class="token punctuation">(</span>close <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response close"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">endHandler</span><span class="token punctuation">(</span>end <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response end"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">exceptionHandler</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  event<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>response.closeHandler</code> 当连接被关闭时的回调<br><code>response.endHandler</code> 当连接响应结束时的回调<br><code>response.exceptionHandler</code> 以外发生时的回调<br>再进行测试<br>先看正常情况</p><p><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2021/02/06/client%E8%BF%90%E8%A1%8C3.gif"><br>运行中途停止客户端<br><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2021/02/06/client%E8%BF%90%E8%A1%8C4.gif"></p><p>如果中途client断开连接,会触发回调函数,通知服务端连接发生变化.可以从这些监听中进行处理,停止后台业务处理,释放对应线程.不做无用功.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Vertx</span> vertx <span class="token operator">=</span> <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Router</span> router <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span>vertx<span class="token punctuation">)</span><span class="token punctuation">;</span>    vertx<span class="token punctuation">.</span><span class="token function">createHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestHandler</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">10789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/test/chunk"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setChunked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AtomicInteger</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> timerId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      vertx<span class="token punctuation">.</span><span class="token function">setPeriodic</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        timerId<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出中:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          vertx<span class="token punctuation">.</span><span class="token function">cancelTimer</span><span class="token punctuation">(</span>timerId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//服务端发送结束符</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">closeHandler</span><span class="token punctuation">(</span>close <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response close"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">endHandler</span><span class="token punctuation">(</span>end <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response end"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">exceptionHandler</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vertx<span class="token punctuation">.</span><span class="token function">cancelTimer</span><span class="token punctuation">(</span>timerId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对基于http协议的理解加对<code>response.exceptionHandler</code>的源码进行简单分析,很很容易就能发现原理是对tcp连接状态进行监控,实际抛出的异常也是连接关闭的异常<code>Connection was closed</code>.</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 重复依赖\冲突打包配置</title>
      <link href="posts/3bd80c2d/"/>
      <url>posts/3bd80c2d/</url>
      
        <content type="html"><![CDATA[<p>使用vert.x官方提供的打包配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven-compiler-plugin.version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven-compiler-plugin.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven-shade-plugin.version</span><span class="token punctuation">&gt;</span></span>3.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven-shade-plugin.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven-surefire-plugin.version</span><span class="token punctuation">&gt;</span></span>2.22.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven-surefire-plugin.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exec-maven-plugin.version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exec-maven-plugin.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vertx.version</span><span class="token punctuation">&gt;</span></span>4.0.2-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vertx.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit-jupiter.version</span><span class="token punctuation">&gt;</span></span>5.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit-jupiter.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main.verticle</span><span class="token punctuation">&gt;</span></span>com.example.starter.MainVerticle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main.verticle</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launcher.class</span><span class="token punctuation">&gt;</span></span>io.vertx.core.Launcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launcher.class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${maven-compiler-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>release</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>release</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${maven-shade-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>                  <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main-Class</span><span class="token punctuation">&gt;</span></span>${launcher.class}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Main-Class</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main-Verticle</span><span class="token punctuation">&gt;</span></span>${main.verticle}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Main-Verticle</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ServicesResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactSet</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactSet</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputFile</span><span class="token punctuation">&gt;</span></span>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputFile</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${maven-surefire-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>exec-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${exec-maven-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>io.vertx.core.Launcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">&gt;</span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">&gt;</span></span>${main.verticle}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>sonatype-oss-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Sonatype OSSRH Snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://oss.sonatype.org/content/repositories/snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>never<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>never<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最近项目整合hadoop环境依赖,由于对hadoop组件不太熟悉,部分依赖互相覆盖,启动报错</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Error: A JNI error has occurred, please check your installation and try againException in thread "main" java.lang.SecurityException: Invalid signature file digest for Manifest main attributesat sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:330)at sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:263)at java.util.jar.JarVerifier.processEntry(JarVerifier.java:318)at java.util.jar.JarVerifier.update(JarVerifier.java:230)at java.util.jar.JarFile.initializeVerifier(JarFile.java:383)at java.util.jar.JarFile.ensureInitialization(JarFile.java:617)at java.util.jar.JavaUtilJarAccessImpl.ensureInitialization(JavaUtilJarAccessImpl.java:69)at sun.misc.URLClassPath$JarLoader$2.getManifest(URLClassPath.java:991)at java.net.URLClassLoader.defineClass(URLClassLoader.java:451)at java.net.URLClassLoader.access$100(URLClassLoader.java:74)at java.net.URLClassLoader$1.run(URLClassLoader.java:369)at java.net.URLClassLoader$1.run(URLClassLoader.java:363)at java.security.AccessController.doPrivileged(Native Method)at java.net.URLClassLoader.findClass(URLClassLoader.java:362)at java.lang.ClassLoader.loadClass(ClassLoader.java:418)at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)at java.lang.ClassLoader.loadClass(ClassLoader.java:351)at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为包的重复引用会导致生成多个MF文件,添加<code>maven-shade-plugin</code>插件的过滤配置删除多余的MF文件.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${maven-shade-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>.....其他配置....</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifact</span><span class="token punctuation">&gt;</span></span>*:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifact</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>META-INF/*.SF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>META-INF/*.DSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>META-INF/*.RSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>...其他配置...</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 使用 viper 读写配置文件</title>
      <link href="posts/73854ea2/"/>
      <url>posts/73854ea2/</url>
      
        <content type="html"><![CDATA[<h2 id="viper"><a href="#viper" class="headerlink" title="viper"></a>viper</h2><p> 主要是用于处理各种格式的配置文件，简化程序配置的读取问题支持 </p><ul><li>设置默认配置</li><li>支持读取 JSON TOML YAML HCL 和 Java 属性配置文件</li><li>监听配置文件变化，实时读取读取配置文件内容</li><li>读取环境变量值</li><li>读取远程配置系统 (etcd Consul) 和监控配置变化</li><li>读取命令 Flag 值</li><li>读取 buffer 值</li><li>读取确切值</li></ul><p>viper 项目地址  <a href="https://github.com/spf13/viper">github.com/spf13/viper</a> </p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/spf13/viper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="根据路径读取配置文件"><a href="#根据路径读取配置文件" class="headerlink" title="根据路径读取配置文件"></a>根据路径读取配置文件</h3><p>目前使用yaml比较多,这里以yaml为例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">proxyconfig</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">localport</span><span class="token punctuation">:</span> <span class="token number">43306</span>  <span class="token key atrule">remoteip</span><span class="token punctuation">:</span> 192.168.1.100  <span class="token key atrule">remoteport</span><span class="token punctuation">:</span> <span class="token number">3306</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">network</span><span class="token punctuation">:</span> tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建对应的结构体</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>ProxyConfig <span class="token punctuation">[</span><span class="token punctuation">]</span>ProxyConfig<span class="token punctuation">}</span><span class="token keyword">type</span> ProxyConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>LocalPort <span class="token builtin">int</span>RemoteIp <span class="token builtin">string</span>RemotePort <span class="token builtin">int</span>Enable <span class="token builtin">bool</span>Network <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读取配置文件</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">v <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./demo.yaml"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>config <span class="token operator">:=</span> Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写出配置文件到指定路径"><a href="#写出配置文件到指定路径" class="headerlink" title="写出配置文件到指定路径"></a>写出配置文件到指定路径</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">v <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./demo.yaml"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"ProxyConfig"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>handler<span class="token punctuation">.</span>ProxyConfig<span class="token punctuation">{</span><span class="token punctuation">{</span>LocalPort<span class="token punctuation">:</span>  <span class="token number">43306</span><span class="token punctuation">,</span>RemoteIp<span class="token punctuation">:</span>   <span class="token string">"192.168.1.100"</span><span class="token punctuation">,</span>RemotePort<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>Network<span class="token punctuation">:</span>    <span class="token string">"tcp"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">WriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>viper.WriteConfig() //写出文件 覆盖</li><li>viper.SafeWriteConfig() // 安全写出  不覆盖,抛出异常</li><li>viper.WriteConfigAs(“/path/to/my/.config”) //写出到指定路径  覆盖</li><li>viper.SafeWriteConfigAs(“/path/to/my/.config”) //安全写出到指定路径 不覆盖</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://github.com/goubo/proxy_go/blob/master/main.go">https://github.com/goubo/proxy_go/blob/master/main.go</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux修改文本编码格式 ascii 转 utf-8</title>
      <link href="posts/5e1a3753/"/>
      <url>posts/5e1a3753/</url>
      
        <content type="html"><![CDATA[<h2 id="ascii-转-utf-8-有-BOM"><a href="#ascii-转-utf-8-有-BOM" class="headerlink" title="ascii 转 utf-8 有 BOM"></a>ascii 转 utf-8 有 BOM</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">8</span>-rw-------. <span class="token number">1</span> root root <span class="token number">1621</span> Sep <span class="token number">28</span> <span class="token number">19</span>:35 anaconda-ks.cfg-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">8</span> Jan  <span class="token number">9</span> <span class="token number">13</span>:37 test.txt<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># cat test.txt</span>abcdefg<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># file test.txt</span>test.txt: ASCII text<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># echo -ne '\xEF\xBB\xBF' &gt; out.txt</span><span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># cat test.txt &gt;&gt; out.txt</span><span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">12</span>-rw-------. <span class="token number">1</span> root root <span class="token number">1621</span> Sep <span class="token number">28</span> <span class="token number">19</span>:35 anaconda-ks.cfg-rw-r--r--  <span class="token number">1</span> root root   <span class="token number">11</span> Jan  <span class="token number">9</span> <span class="token number">13</span>:40 out.txt-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">8</span> Jan  <span class="token number">9</span> <span class="token number">13</span>:37 test.txt<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># file test.txt</span>test.txt: ASCII text<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># file out.txt</span>out.txt: UTF-8 Unicode <span class="token punctuation">(</span>with BOM<span class="token punctuation">)</span> text<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment"># cat out.txt</span>abcdefg<span class="token punctuation">[</span>root@applicationServer ~<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算|常用场景</title>
      <link href="posts/4dcfcf81/"/>
      <url>posts/4dcfcf81/</url>
      
        <content type="html"><![CDATA[<h2 id="位运算介绍"><a href="#位运算介绍" class="headerlink" title="位运算介绍"></a>位运算介绍</h2><p>最近工作涉及一些数据传输\加密\计算相关内容,发现位运算这么好用的东西,竟然没人用.这里做一下位运算基础操作和常用场景.</p><blockquote><p>程序中的所有数在计算机内存中都是以二进制的形式储存的。位运算就是直接对整数在内存中的二进制位进行操作。比如，and运算本来是一个逻辑运算符，但整数与整数之间也可以进行and运算。举个例子，6的二进制是110，11的二进制是1011，那么6 and 11的结果就是2，它是二进制对应位进行逻辑运算的结果（0表示False，1表示True，空位都当0处理）。  摘自<a href="https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97">百度百科</a>  </p><p>位操作是程序设计中对位模式或二进制数的一元和二元操作。在许多古老的微处理器上，位运算比加减运算略快，通常位运算比乘除法运算要快很多。在现代架构中，情况并非如此：位运算的运算速度通常与加法运算相同（仍然快于乘法运算）。摘自<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E6%93%8D%E4%BD%9C">维基百科</a></p></blockquote><p>位运算一般用于二进制数据计算,但总所周知,计算机所有的数据都是二进制.现代高级语言中,有各种函数和运算符可以直接对数字进行计算,但是需要特定的场景使用位运算能提升运行效率和稳定性.</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算包含 与或非,异或,位移</p><table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1</td></tr><tr><td>~</td><td>取反</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table><h3 id="与"><a href="#与" class="headerlink" title="与"></a>与</h3><p>与运算,两个位都为1时，结果才为1  </p><table><thead><tr><th>输入A</th><th>输入B</th><th>输出</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><p>或运算两个位都为0时，结果才为0</p><table><thead><tr><th>输入A</th><th>输入B</th><th>输出</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><h3 id="非、取反"><a href="#非、取反" class="headerlink" title="非、取反"></a>非、取反</h3><p>取反运算 0变1，1变0</p><table><thead><tr><th>输入A</th><th>输出</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td></tr></tbody></table><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>异或运算 两个位相同为0，相异为1</p><table><thead><tr><th>输入A</th><th>输入B</th><th>输出</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><h3 id="按位与-按位或-按位非-按位异或"><a href="#按位与-按位或-按位非-按位异或" class="headerlink" title="按位与 按位或 按位非 按位异或"></a>按位与 按位或 按位非 按位异或</h3><p>两个二进制数字,右端对齐后,逐位进行位计算的到的结果<br>例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jshell&gt; 28 | 5$19 ==&gt; 29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将十进制转二进制 28 = <code>0001 1100</code> , 5 = <code>0000 0101</code><br>按位或运算</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">    0001 1100OR  0000 0101----------------    0001 0101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>0001 0101 = 29<br>其他运算相同的操作逻辑</p><h3 id="位移运算"><a href="#位移运算" class="headerlink" title="位移运算"></a>位移运算</h3><h4 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h4><p>将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）<br>例如 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jshell&gt; int i = 7i ==&gt; 7jshell&gt; i &lt;&lt;= 1$5 ==&gt; 14jshell&gt; ii ==&gt; 14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位于计算是二进制操作,先把7转为二进制 <code>7 = 0000 0111 </code><br>将 所有位向左移动1位,最右位补0.</p><pre class="line-numbers language-none"><code class="language-none">0000 0111 &lt;&lt; 1 0000 1110 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>0000 1110</code> 转10进制 等于 14</p><p>i 左移一位 相当于 i * 2,<br>i 左移N位 等于 $ i * 2^N $</p><h4 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h4><p>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）<br>java 右移分为有符号右移(&gt;&gt;&gt;,逻辑右移) 和无符号右移(&gt;&gt;,算术右移)<br>java 保存有符号(负号)整数时,最高位(最左)保存符号,0代表正数,1代表负数.保存负数时以<a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81">补码</a>形式保存,其实就是取反了.<br>以java int 为例,int 是4字节长度保存整数,一共4 * 8 = 32 位.最高位保存符号,其余31位用来保存实际数字,所以int 取值范围 为 -2147483648 ~ 2147483647 .<br>因为有0的存在,需要占一位,正数部分最大值为 $2^{31} -1$,负数为 $- ( 2^{31} )$.<br>负数数字补码部分由于0的存在,需要-1后取反<br>例如 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">  0 = 0000 0000 0000 0000 0000 0000 0000 0000 10 = 0000 0000 0000 0000 0000 0000 0000 1010 -1 = 1111 1111 1111 1111 1111 1111 1111 1111-10 = 1111 1111 1111 1111 1111 1111 1111 0110 10 &gt;&gt; 1 = 5  5 = 0000 0000 0000 0000 0000 0000 0000 0101 -10 &gt;&gt; 1 = -5 -5 = 1111 1111 1111 1111 1111 1111 1111 1011  10 &gt;&gt;&gt; 1 = 5   5 = 0000 0000 0000 0000 0000 0000 0000 0101 -10 &gt;&gt;&gt; 1 = 2147483643 2147483643 = 0111 1111 1111 1111 1111 1111 1111 1011 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有符号右移时,高位会补符号位的值,负数右移前面会补1<br>无法好位移时,高位直接补0,负数右移后,符号位补0变正数</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="位计算"><a href="#位计算" class="headerlink" title="位计算"></a>位计算</h3><p>位计算用的最多的应该是权限判断相关的,1个int类型,32个有效长度,可以保存32种可叠加的状态.例如linux的权限,使用3位进行保存读写执行状态,其中,1为是否可执行,2为是否可写,4为是否可读.把这三个数转换为二进制,就能发现.</p><pre class="line-numbers language-bit" data-language="bit"><code class="language-bit">1  =&gt;  0001  ==  1 &lt;&lt; 02  =&gt;  0010  ==  1 &lt;&lt; 14  =&gt;  0100  ==  1 &lt;&lt; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一个文件初始为0000,使用或运算赋权可读4,再叠加赋权可写权限2,</p><pre class="line-numbers language-bit" data-language="bit"><code class="language-bit">    0 = 0000    4 = 0100    2 = 0010| -----------        0110 = 60 | 4 | 2 = 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linux 可读可写,不可执行权限即为6.<br>验证是否有权限,则使用与运算,判断对应位是否为1.<br>例如,文件权限为6 ,判断是否包含写权限2.</p><pre class="line-numbers language-bit" data-language="bit"><code class="language-bit">    6 = 0110    2 = 0010&amp; -----------        0010 = 2        (6 &amp; 2 == 2) = true 验证文件具有写权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除权限需要使用异或计算,相同位为0,不同位为1<br>例如,文件权限为6 ,删除写权限2.</p><pre class="line-numbers language-bit" data-language="bit"><code class="language-bit">    6 = 0110    2 = 0010^ -----------        0100 = 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>异或运算可以用来排他计算.一个非常经典的算法题:一个int数组,长度为奇数,除一个数字外,其他的数字都是成对出现,最快找到这个数.这时就需要使用异或运算,遍历每个元素进行异或,相同得0,不同得1,结果就是最不同的孤寡蛙.</p><h3 id="位移运算-1"><a href="#位移运算-1" class="headerlink" title="位移运算"></a>位移运算</h3><p>位移运算最简单的用处就是快速 乘除 2 以及2的指数.运算速度比乘除运算符要快.但是只适合整数,小数的二进制以指数方式保存,无法使用位移运算.</p><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明权限</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 赋权</span>i <span class="token operator">|=</span> a<span class="token punctuation">;</span> <span class="token comment">// i = i | a;</span><span class="token comment">// 回收</span>i <span class="token operator">^=</span> a<span class="token punctuation">;</span><span class="token comment">// i = i ^ a;</span><span class="token comment">//判断</span>i <span class="token operator">&amp;</span> a <span class="token operator">==</span> a<span class="token punctuation">;</span> <span class="token comment">// boolean</span><span class="token comment">//判断是否为偶数</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment">// i % 2 != 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 11 使用jenv管理 多版本jdk</title>
      <link href="posts/79db5390/"/>
      <url>posts/79db5390/</url>
      
        <content type="html"><![CDATA[<h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>mac升级big sug系统后,之前使用的jdk切换命令有些问题,使用sdkman几天后,发现兼容性还是有一些问题的.最后还是切换成 oracle jdk,使用jenv管理</p><p>下载jdk就不废话了,记录一下安装jenv和开发环境配置的一些过程</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ol><li>安装 <a href="https://brew.sh/index_zh-cn">homebrew</a>,现在已经适配了<br>安装命令:<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>安装<code>openjdk </code> 如果需要<code>maven</code> ,可以直接安装<code>maven</code>,会自动依赖openjdk<br>安装命令:<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew <span class="token function">install</span> openjdkor brew <span class="token function">install</span> maven<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>安装 <code>jenv</code><br>安装命令:<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew <span class="token function">install</span> jenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下载安装<code>oracle jdk</code><br>我这里安装的是1.8和11版本,对应安装自己需要的版本</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><p>执行<code>jenv</code>命令,可以看到<code>jenv</code>的帮助文档</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ jenv                            jenv <span class="token number">0.5</span>.4Usage: jenv <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">&gt;</span><span class="token punctuation">]</span>Some useful jenv commands are:   commands    List all available jenv commands   <span class="token builtin class-name">local</span>       Set or show the <span class="token builtin class-name">local</span> application-specific Java version   global      Set or show the global Java version   shell       Set or show the shell-specific Java version   rehash      Rehash jenv shims <span class="token punctuation">(</span>run this after installing executables<span class="token punctuation">)</span>   version     Show the current Java version and its origin   versions    List all Java versions available to jenv   <span class="token function">which</span>       Display the full path to an executable   whence      List all Java versions that contain the given executable   <span class="token function">add</span>         Add JDK into jenv. A <span class="token builtin class-name">alias</span> name will be generated by parsing <span class="token string">"java -version"</span>See `jenv <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>' <span class="token keyword">for</span> information on a specific command.For full documentation, see: https://github.com/jenv/jenv/blob/master/README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看安装的jdk位置"><a href="#查看安装的jdk位置" class="headerlink" title="查看安装的jdk位置"></a>查看安装的jdk位置</h3><p>执行<code>/usr/libexec/java_home -V</code> 可以看到当前系统所有的jdk,</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/usr/libexec/java_home -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Matching Java Virtual Machines <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:    <span class="token number">11.0</span>.9 <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> <span class="token string">"Oracle Corporation"</span> - <span class="token string">"Java SE 11.0.9"</span> /Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home    <span class="token number">1.8</span>.271.09 <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> <span class="token string">"Oracle Corporation"</span> - <span class="token string">"Java"</span> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home    <span class="token number">1.8</span>.0_271 <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> <span class="token string">"Oracle Corporation"</span> - <span class="token string">"Java SE 8"</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home/Users/bobo/.jenv/versions/1.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加jdk到jenv管理中"><a href="#添加jdk到jenv管理中" class="headerlink" title="添加jdk到jenv管理中"></a>添加jdk到jenv管理中</h3><p>使用<code>jevn add &lt;path&gt;</code>命令将jdk添加到jenv管理中.例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ jenv <span class="token function">add</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Homeoracle64-1.8.0.271 added<span class="token number">1.8</span>.0.271 added<span class="token number">1.8</span> already present, skip installation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看当前版本"><a href="#查看当前版本" class="headerlink" title="查看当前版本"></a>查看当前版本</h3><p>使用<code>jenv versions </code>命令,查看当前所有的版本,带<code>*</code>的是当前使用的版本,或者使用<code>jenv version</code> 查看当前使用的版本.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jenv version  system* <span class="token number">1.8</span> <span class="token punctuation">(</span>set by /Users/bobo/.java-version<span class="token punctuation">)</span>  <span class="token number">1.8</span>.0.271  <span class="token number">11</span>  oracle64-1.8.0.271<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置系统jdk版本"><a href="#设置系统jdk版本" class="headerlink" title="设置系统jdk版本"></a>设置系统jdk版本</h3><p>使用<code>jenv local &lt;version name&gt;</code> 设置系统当前版本,例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jenv <span class="token builtin class-name">local</span> <span class="token number">1.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除版本"><a href="#删除版本" class="headerlink" title="删除版本"></a>删除版本</h3><p>使用<code>jenv remove &lt;version name&gt;</code> 删除管理的版本.</p><blockquote><p>注意,这里只会删除jenv管理列表,不会卸载jdk,jdk仍然在磁盘中.</p></blockquote><h2 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h2><h3 id="设置-JAVA-HOME"><a href="#设置-JAVA-HOME" class="headerlink" title="设置 JAVA_HOME"></a>设置 JAVA_HOME</h3><p>使用<code>jenv local</code> 设置默认jdk后,<code>JAVA_HOME</code> 仍然是空的,如果有其他软件或命令需要使用环境变量会找不到jdk.通过使用插件解决.执行命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jenv enable-plugin <span class="token builtin class-name">export</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装export插件后,再切换jdk版本会同步设置<code>JAVA_HOME</code>环境变量</p><h3 id="设置mavne使用的jdk版本"><a href="#设置mavne使用的jdk版本" class="headerlink" title="设置mavne使用的jdk版本"></a>设置mavne使用的jdk版本</h3><p>如果希望使用maven使用的jdk版本和jenv管理的版本一直,可以安装mavne插件.执行命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jenv enable-plugin maven<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mvn -vApache Maven <span class="token number">3.6</span>.3 <span class="token punctuation">(</span>cecedd343002696d0abb50b32b541b8a6ba2883f<span class="token punctuation">)</span>Maven home: /usr/local/Cellar/maven/3.6.3_1/libexecJava version: <span class="token number">1.8</span>.0_271, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: <span class="token string">"mac os x"</span>, version: <span class="token string">"10.16"</span>, arch: <span class="token string">"x86_64"</span>, family: <span class="token string">"mac"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156/"/>
      <url>posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vert.x 异步调用基础</title>
      <link href="posts/88c52106/"/>
      <url>posts/88c52106/</url>
      
        <content type="html"><![CDATA[<p><a href="/posts/e9fa19ca">上篇文章</a> 简单介绍了一下如何使用Vert.x部署一个Verticle并创建一个http server。以及路由的试用。在部署Verticle的时候，我们使用的 <code>start()</code> 函数的重载是<code>start(Promise&lt;Void&gt;)</code>。这里的<code>Promise</code>就是Vert.x异步框架会用到的最多的一个对象（划重点）。<code>Promise</code>对象是从代码上能最直观体现Vert.x的异步非阻塞特性的。</p><a id="more"></a><h2 id="异步非阻塞概念"><a href="#异步非阻塞概念" class="headerlink" title="异步非阻塞概念"></a>异步非阻塞概念</h2><p>Vert.x十一个异步非阻塞的框架。如果想熟练高效使用这个最少先把异步非阻塞这两个概念搞明白。</p><h2 id="同步、异步"><a href="#同步、异步" class="headerlink" title="同步、异步"></a>同步、异步</h2><p>这里的异步，主要是指消息通信机制的异步。例如一个函数调用另一个函数。如果是同步机制，<code>调用者</code>调用<code>被调用者</code>，在<code>被调用者</code>执行过程中，<code>调用者</code>主动等待这个调用，<code>被调用者</code>执行完成后返回对应结果。<br>异步调用的情况下，<code>调用者</code>调用<code>被调用者</code>后，<code>被调用者</code>执行完成后，主动通知<code>调用者</code>（回调）。<br>注意<strong>同步异步，只是针对被调用者而言，是函数返回结果的通信机制而已。</strong></p><h2 id="阻塞、非阻塞"><a href="#阻塞、非阻塞" class="headerlink" title="阻塞、非阻塞"></a>阻塞、非阻塞</h2><p><strong>阻塞和非阻塞是针对线程而言的。</strong>还是这个例子，先说同步情况下。<br>如果是同步情况下，<code>调用者</code>调用函数后，当前线程就会挂起，<code>被调用者</code>开始执行，<code>被调用者</code>执行完成返回结果后，<code>调用者</code>线程再继续执行。在Main方法中随便写个最简单的函数调用就是这种。这种<code>调用者</code>线程就是阻塞的。<br>非阻塞就是在<code>调用者</code>调用一个函数后，不阻塞<code>调用者</code>当前线程，不等待<code>被调用者</code>返回，而是每隔一段时间检查<code>被调用者</code>是否完成。<br>如果是异步非阻塞。<code>调用者</code>调用对应函数后，不阻塞当前线程，不用等待函数返回。<code>被调用者</code>执行完成后再通知<code>调用者</code>，进行后续处理。</p><p>拿KFC的点餐举个栗子</p><ul><li>以前KFC是点餐和配餐同时的，付钱之后站在原地等着配餐，后面没点餐的也陪你等配餐，只有你拿到配餐之后，其他排队的才能开始点餐。  <strong>同步阻塞型</strong></li><li>后来KFC经理智商回暖了。新开一个配餐柜台，付钱后拿到一个小票，你就可以该干啥干啥去，不要耽误后面人点餐。你只要同时监控一下配餐窗口显示器，你的小票号码出现在显卡器上就可以取餐。  <strong>同步非阻塞</strong></li><li>随着科技发展，现在点餐不需要你自己监控显示器，而是在配餐完成后发短信给你的支付手机。你就可以去做别的事情，当手机收到通知时再去配餐柜台取餐即可 <strong>异步非阻塞</strong></li><li>至于<strong>异步阻塞</strong>，emmm~ 大概就是拿着手机支付完还霸占着点餐台等这种行为吧。。。（轻蔑）<h1 id="Vert-x-异步线程模型"><a href="#Vert-x-异步线程模型" class="headerlink" title="Vert.x 异步线程模型"></a>Vert.x 异步线程模型</h1>这里推荐一个大神的文章<a href="https://www.sczyh30.com/posts/Vert-x/vertx-advanced-demystifying-thread-model/">Vert.x 技术内幕 </a>，当时我最初接触Vert.x也是3.3.3版本，这位大神深入简出，结合官方资料和自己的知识详细介绍了Vert.x的技术原理和细节，看过之后受益良多。这里我就不班门弄斧了。我主要还是从代码和应用角度梳理一下Vert.x的试用。<br>这些点是一定要注意的</li></ul><ol><li>我们写的代码，只有两种，Event Loop 线程和 Worker 线程，Event Loop 线程是绝对不能阻塞其运行的。</li><li>不要自己手动创建线程，使用Vert.x提供的异步接口来创建线程。</li></ol><blockquote><p><a href="https://vertx.io/docs/vertx-core/java/#_don_t_block_me">Don’t block me!</a><br><a href="https://vertx.io/docs/vertx-core/java/#golden_rule">The Golden Rule - Don’t Block the Event Loop</a><br><a href="https://vertx.io/docs/vertx-core/java/#blocking_code">Running blocking code</a></p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>代码示例之前，先给大家介绍一个Vert.x的一个接口<a href="https://vertx.io/docs/vertx-core/java/#_executing_periodic_and_delayed_actions">执行定期和延迟的操作</a>，在实际开发中也会用到。这里用来帮助我们理解代码也是及其方便的。<br>在test目录下创建<code>TestTimerVerticle</code>类，修改TestMain，部署<code>TestTimerVerticle</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        Vertx.vertx().deployVerticle(MainVerticle.class.getName());</span>        <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deployVerticle</span><span class="token punctuation">(</span><span class="token class-name">TestTimerVerticle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<code>TestTimerVerticle</code>的<code>start()</code>函数，在方法中添加测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":设置一个timer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vertx<span class="token punctuation">.</span><span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":3秒到了，该打印 Hello World 了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":3秒后打印 Hello World！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用setTimer方法，设置一个定时器，定时3秒后执行回调方法，打印<code>3秒到了，该打印 Hello World 了</code>，前面加一个时间戳，判断打印顺序。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">2019-09-03T16:45:27.792312:设置一个timer2019-09-03T16:45:27.794229:3秒后打印 Hello World！2019-09-03T16:45:30.794139:3秒到了，该打印 Hello World 了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从输出结果可以看出，setTimer 本身就是一个异步非阻塞函数，调用timer函数，并没有阻塞当前start方法，先打印出了<code>3秒后打印 Hello World！</code>,然后3秒后，由timer方法的回调执行<code>3秒到了，该打印 Hello World 了</code>。目前我们可以用这个来模拟各种耗时操作的nio接口，比如查询数据库等。</p><h3 id="异步方法"><a href="#异步方法" class="headerlink" title="异步方法"></a>异步方法</h3><p>根据前面介绍，实现一个异步方法，只要我们满足函数能立即返回调用，并且在处理完成后主动通知调用方即可。</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>Vert.x使用<code>Future</code>表示一个未知结果的调用返回。从3.8.0版本后不再直接使用，而是配合<code>Promise</code>接口使用，创建一个响应式的函数接口非常简单。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token class-name">Promise</span><span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"调用getSomething函数，查询一些东西，假设查询需要5秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"必须调用异步api，或者使用WorkerExecutor线程封装阻塞代码。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vertx<span class="token punctuation">.</span><span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"5秒后，查询完成，返回查询结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        promise<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token string">"这是查询的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"返回promise，调用完成，不阻塞调用线程。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>调用方式也很简单</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始测试getSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取查询结果==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始测试getSomething 结束，主线程不阻塞，继续执行。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>重新运行项目得到输出</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">开始测试getSomething2019-09-04T15:39:17.384836调用getSomething函数，查询一些东西，假设查询需要5秒2019-09-04T15:39:17.385385必须调用异步api，或者使用WorkerExecutor线程封装阻塞代码。2019-09-04T15:39:17.387350返回promise，调用完成，不阻塞调用线程。开始测试getSomething 结束，主线程不阻塞，继续执行。......2019-09-04T15:39:22.392342--------------------------2019-09-04T15:39:22.3924805秒后，查询完成，返回查询结果获取查询结果==&gt;这是查询的结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="过程梳理"><a href="#过程梳理" class="headerlink" title="过程梳理"></a>过程梳理</h4><p>输出内容打印上时间戳，可以明显看出，先打印了<code>返回promise，调用完成，不阻塞调用线程</code>。并且执行了return 方法5秒后才打印<code>5秒后，查询完成，返回查询结果</code>,并且主线程在getSomething函数返回return后立即向下执行。<br><code>Promise对</code>象之前叫做<code>Future</code>，现在是<code>Promise</code>的一个属性，虽然版本升级我一个人加班改了所有的代码，不过我还是觉得这个名字更直白，方便理解。<br>调用一个异步函数，函数立即返回一个<code>Promise.future()</code>表示将来可能的结果。而不需要阻塞等待结果。等到运行完成后提交结果完成承诺；调用者在得到<code>Future</code>后绑定一个<code>Handler</code>，当<code>Promise</code>被提交的时候，运行<code>Handler</code>里的内容。<br><code>handler</code>中的参数，就是<code>Promise</code>提交的内容。细看一下<code>Promise</code>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Create a promise that hasn't completed yet** @param &lt;T&gt;  the result type* @return  the promise*/</span><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Promise</code>和<code>Futurn</code>一样由<code>Factory</code>工厂产生，而且提供了静态方法方便试用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/*** Set the result. Any handler will be called, if there is one, and the promise will be marked as completed.* &lt;p/&gt;* Any handler set on the associated promise will be called.** @param result  the result* @throws IllegalStateException when the promise is already completed*/</span><span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Calls {@code complete(null)}** @throws IllegalStateException when the promise is already completed*/</span><span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Set the failure. Any handler will be called, if there is one, and the future will be marked as completed.** @param cause  the failure cause* @throws IllegalStateException when the promise is already completed*/</span><span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Calls {@link #fail(Throwable)} with the {@code message}.** @param message  the failure message* @throws IllegalStateException when the promise is already completed*/</span><span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Like {@link #complete(Object)} but returns {@code false} when the promise is already completed instead of throwing* an {@link IllegalStateException}, it returns {@code true} otherwise.** @param result  the result* @return {@code false} when the future is already completed*/</span><span class="token keyword">boolean</span> <span class="token function">tryComplete</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Calls {@code tryComplete(null)}.** @return {@code false} when the future is already completed*/</span><span class="token keyword">boolean</span> <span class="token function">tryComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Like {@link #fail(Throwable)} but returns {@code false} when the promise is already completed instead of throwing* an {@link IllegalStateException}, it returns {@code true} otherwise.** @param cause  the failure cause* @return {@code false} when the future is already completed*/</span><span class="token keyword">boolean</span> <span class="token function">tryFail</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Calls {@link #fail(Throwable)} with the {@code message}.** @param message  the failure message* @return false when the future is already completed*/</span><span class="token keyword">boolean</span> <span class="token function">tryFail</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当函数内容处理完成后使用<code>complete()</code>函数提交结果，如果发生异常或需要标记失败的结果，可以使用<code>fail()</code>函数。需要注意一个承诺只能提交一次，一旦提交就不能改口了（多浅显的道理，为啥那么多人不懂呢？）。如果函数分支太多或逻辑过于复杂又没去拆分简化，可以使用<code>tryComplete()</code>和<code>tryFail()</code>尝试提交，如果已经被提交返回false，否则提交结果。</p><h4 id="Handle"><a href="#Handle" class="headerlink" title="Handle"></a>Handle</h4><p>实现一个<code>Handle</code>接口，调用<code>Promise.future.handle()</code>进行绑定，当<code>Promise</code>提交返回结果时，触发执行<code>handle</code>接口对象，实现回调。<br>handle这里又涉及了一个jdk8的新特性，<code>函数接口</code>，简单一句话：<strong>有且只有一个公开的抽象方法的接口，就叫做函数接口</strong>。<br>使用注解<code>@FunctionalInterface</code>可以检查是否符合规范。函数接口诠释了**<code>函数即对象</code>**的概念，实现一个函数接口只需要实现函数接口里唯一的抽象方法即可。<br>Vert.x的<code>Handle</code>接口是一个使用十分广泛，十分重要的接口，大部分异步api回调函数都是使用了<code>Handle</code>接口。</p><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><p>如果说<code>Promise</code>是异步回调的方式和通道，<code>Future</code>就是回调消息的本体。先看一下<code>Future</code>接口，继承了两个接口<code>AsyncResult&lt;T&gt;</code>和<code> Handler&lt;AsyncResult&lt;T&gt;&gt;</code>。<br><code>AsyncResult</code>是一个异步回调返回的消息内容。主要用到的函数有</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 回调消息的内容，相当于返回值,泛型在创建Promise时指定</span><span class="token class-name">Throwable</span> <span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用fail函数返回错误是，用于保存错误信息</span><span class="token keyword">boolean</span> <span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表示已经调用complete()成功回调</span><span class="token keyword">boolean</span> <span class="token function">failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表示已经调用fail()失败回调</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Handler</code>已经说过了，是一个函数接口，回调后会自动执行(实际是Future中调用，3.8.0版本在io.vertx.core.impl.FutureImpl:126可以看到)。<code>Handler</code>的泛型类型是<code>AsyncResult</code>，表示函数接口的入参。在实现<code>handler</code>的时候可以直接获取<code>Future</code>的<code>AsyncResult</code>对象得到回调消息，进行处理。</p><p>Future 本身的主要函数有</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">future</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Promise</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//工厂方法。创建一个未完成的Future，并且为绑定指定Promise的handler，promise需要是未返回的。</span><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//工厂方法，创建一个future</span><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">succeededFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">succeededFuture</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//工厂方法，创建一个成功返回的future  同步返回使用</span><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">failedFuture</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">failedFuture</span><span class="token punctuation">(</span><span class="token class-name">String</span> failureMessage<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//工厂方法，创建一个失败返回的future   同步返回使用</span><span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 判断是否已经提交返回<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">setHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncResult</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定handler</span><span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回成功</span><span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">String</span> failureMessage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Future调用还有一个需要注意的点，在异步函数中，返回异步结果的时候，也就是调用<code>complete()</code>或<code>fail()</code>时，保证在<code>setHandler()</code>绑定处理之后。否则在提交返回时，handler为空就无法触发回调处理。</p><h4 id="同步返回"><a href="#同步返回" class="headerlink" title="同步返回"></a>同步返回</h4><p>但是有些场景下，我们可能不需要进行异步操作，直接就能同步返回future的结果。这时上面示例的代码就无法运行了。需要用到同步返回的操作方式<br>还是刚才的例子比如我们在调用<code>getSomething()</code>时传递一个int参数，如果int是0，直接返回成功，如果int不是0执行异步处理，1返回成功，否则返回失败。我们修改一下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">succeededFuture</span><span class="token punctuation">(</span><span class="token string">"i == 0 ,这里是直接返回的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token class-name">Promise</span><span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"调用getSomething函数，查询一些东西，假设查询需要5秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"必须调用异步api，或者使用WorkerExecutor线程封装阻塞代码。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vertx<span class="token punctuation">.</span><span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"5秒后，查询完成，返回查询结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            promise<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token string">" i == 1，这里返回成功结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            promise<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">" i == "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"，这里返回失败结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"返回promise，调用完成，不阻塞调用线程。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Anchor"></a><br>添加测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始测试getSomething(int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用complete方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取查询结果==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用fail方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询错误是的返回信息==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用complete方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取查询结果==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用fail方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询错误是的返回信息==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用complete方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取查询结果==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用fail方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询错误是的返回信息==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">开始测试getSomething(int)如果是调用complete方法提交，执行这里获取查询结果==&gt;i == 0 ,这里是直接返回的内容2019-09-05T15:17:21.853280调用getSomething函数，查询一些东西，假设查询需要5秒2019-09-05T15:17:21.853649必须调用异步api，或者使用WorkerExecutor线程封装阻塞代码。2019-09-05T15:17:21.855346返回promise，调用完成，不阻塞调用线程。2019-09-05T15:17:21.855623调用getSomething函数，查询一些东西，假设查询需要5秒2019-09-05T15:17:21.855675必须调用异步api，或者使用WorkerExecutor线程封装阻塞代码。2019-09-05T15:17:21.855741返回promise，调用完成，不阻塞调用线程。......2019-09-05T15:17:26.856019--------------------------2019-09-05T15:17:26.8561395秒后，查询完成，返回查询结果如果是调用complete方法提交，执行这里获取查询结果==&gt; i == 1，这里返回成功结果2019-09-05T15:17:26.856471--------------------------2019-09-05T15:17:26.8565615秒后，查询完成，返回查询结果如果是调用fail方法提交，执行这里查询错误是的返回信息==&gt; i == 2，这里返回失败结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出结果地三行可以看出，i == 0的情况下，直接执行了handler函数。因为方法提前return，后面的代码就不用管了。</p><p><a href="https://github.com/goubo/library-management/tree/ch02">代码链接</a></p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p><a href="#Anchor">同步返回测试</a>代码中三个handler中的代码完全一样，可以封装简化。<br>新测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> handler1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用complete方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取查询结果==&gt;"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用fail方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询错误是的返回信息==&gt;"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> handler <span class="token operator">=</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用complete方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取查询结果==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果是调用fail方法提交，执行这里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询错误是的返回信息==&gt;"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始测试getSomething(int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>handler和handler1完全相同。handler1是jdk8以前接口的匿名实现方式。handler 使用<code>lambda</code>对函数接口的简化声明。代码相对简洁许多。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端框架 </category>
          
          <category> Vert.x框架教程《图书馆信息管理系统》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vert.x 3.8.0 框架基础</title>
      <link href="posts/e9fa19ca/"/>
      <url>posts/e9fa19ca/</url>
      
        <content type="html"><![CDATA[<p><a href="http://vertx.io/">Vert.x 3.8.0</a>已经发布（写这篇文章的时候）,本次改动说大不大，说小也不小，删了之前介绍Vert.x 3.5的文章，重新使用3.8版本开发一个单点后台程序，为Vert.x发展信徒（误）  </p><p>开发环境：idea+maven+mysql+java8<br>计划开发一个图书馆信息管理系统。只做最简单的api后台功能，目的是梳理Vert.x开发思路。能力一般水平有限，从代码出发，尽量说清楚相关的内容。<br>前端实在太复杂了，不感动不感动</p><p>本篇文章为第一章，创建项目,介绍一下基础知识，并创建http server监听web端口。</p><a id="more"></a><h2 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h2><p>创建maven工程，pom文件添加Vert.x依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.vertx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>vertx-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建对应的类<br><code>com.bobo.library.MainVerticle</code>继承<code>AbstractVerticle</code>抽象类,再重写<code>start()</code>函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bobo<span class="token punctuation">.</span>library</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AbstractVerticle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Promise</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainVerticle</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractVerticle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> startPromise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是 MainVerticle 的 start 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这里使用<code>com.bobo.library.MainVerticle</code>类作为程序入口，<code>start()</code>函数就相当于往常程序的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="start-函数"><a href="#start-函数" class="headerlink" title="start() 函数"></a>start() 函数</h2><p><code>start()</code>函数是 Verticle接口中定义的函数,当我们创建的Verticle被部署，将会自动执行<code>start()</code>函数。<br><code>start()</code>函数有3个重载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * If your verticle does a simple, synchronous start-up then override this method and put your start-up  * code in here.  * @throws Exception  */</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>   <span class="token comment">/**  * Start the verticle.&lt;p&gt;  * This is called by Vert.x when the verticle instance is deployed. Don't call it yourself.&lt;p&gt;  * If your verticle does things in its startup which take some time then you can override this method  * and call the startFuture some time later when start up is complete.  * @param startFuture  a future which should be called when verticle start-up is complete.  * @throws Exception  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> startFuture<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>   <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   startFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及3.8.0版本新加入的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Start the verticle instance. * &lt;p&gt; * Vert.x calls this method when deploying the instance. You do not call it yourself. * &lt;p&gt; * A promise is passed into the method, and when deployment is complete the verticle should either call * {@link io.vertx.core.Promise#complete} or {@link io.vertx.core.Promise#fail} the future. * * @param startPromise  the future */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> startPromise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> startPromise<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署Verticle"><a href="#部署Verticle" class="headerlink" title="部署Verticle"></a>部署Verticle</h2><p>写一个main方法测试部署一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bobo<span class="token punctuation">.</span>library<span class="token punctuation">.</span></span><span class="token class-name">MainVerticle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Vertx</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deployVerticle</span><span class="token punctuation">(</span><span class="token class-name">MainVerticle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>TestMain</code>，创建Vertx对象，部署Verticle对象,然后调用<code>deployVerticle()</code>函数部署前面的<code>MainVerticle</code>。部署完成后自动执行<code>start()</code>函数。</p><h2 id="什么是Verticle"><a href="#什么是Verticle" class="headerlink" title="什么是Verticle"></a>什么是Verticle</h2><p>大多文章一般把这一项放在开头进行说明，虽然解释的十分详尽，但对于第一次接触Vert.x的新手来说，理解起来还是挺困难的。其实Verticle就是运行在Vert.x里的一个代码模块。Vert.x 和spring ，netty等框架不同，Vert.x 不止是一个框架，更是一个应用平台。我们可以使用各种语言编写Vert.x应用(其实就是Verticle)，发布在Vert.x平台实例上运行。  </p><blockquote><p>如果Vert.x比作TomCat，一个Verticle就是webapps目录下发布的一个项目</p></blockquote><h2 id="创建-HTTP-server-Verticle"><a href="#创建-HTTP-server-Verticle" class="headerlink" title="创建 HTTP server Verticle"></a>创建 HTTP server Verticle</h2><p><a href="https://vertx.io/docs/vertx-web/java/#_re_cap_on_vert_x_core_http_servers">Vert.x官方文档</a>中已经详细介绍了如何创建httpserve，这里就不再啰嗦了。直接编写代码进行讲解。</p><ul><li> 创建<code>com.bobo.library.http.HTTPServerVerticle</code>,同样继承<code>AbstractVerticle</code>类，重载<code>start()</code>函数。</li><li> 参考Vert.x官方文档创建<code>HttpServer</code>对象，使用<code>requestHandler</code>函数为<code>HttpServer</code>对象绑定处理函数，监听对应tcp端口。(lambda语法是java8的魂，以后有心情专门梳理一下)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bobo<span class="token punctuation">.</span>library<span class="token punctuation">.</span>http</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AbstractVerticle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Promise</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>vertx<span class="token punctuation">.</span>core<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServerResponse</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HTTPServerVerticle</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractVerticle</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> startPromise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServer</span> server <span class="token operator">=</span> vertx<span class="token punctuation">.</span><span class="token function">createHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">requestHandler</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// This handler gets called for each request that arrives on the server</span>            <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Write to the response and end it</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 发布<code>HTTPServerVerticle</code> 实例，在<code>MainVerticle</code>的<code>start()</code>函数中部署即可。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">vertx<span class="token punctuation">.</span><span class="token function">deployVerticle</span><span class="token punctuation">(</span><span class="token class-name">HTTPServerVerticle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 启动<code>TestMain</code>测试http服务</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl http://127.0.0.1:8081 Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此一个简单的HttpServer监听就创建完成了。</p><h2 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由 Router"></a>路由 Router</h2><p>上面示例的httpserver监听的是一个端口，所有到这个端口的请求都由<code>requestHandler</code>函数指定的<code>Handler</code>执行。一般我们正常的系统都有多个api接口。如果请求都发到同一个<code>Handler</code>再手动分发就太麻烦了。<br><code>Vert.x-web</code>中提供<code>Router</code>接口，使用<code>Router</code>接收HTTP请求并找到该请求的第一个匹配路由，并将请求传递给该路由。</p><p>先在pom.xml中导入Vert.x-web模块的依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>io<span class="token punctuation">.</span>vertx<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>vertx<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.8</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改造一下<code>HTTPServerVerticle</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> startPromise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServer</span> server <span class="token operator">=</span> vertx<span class="token punctuation">.</span><span class="token function">createHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Router</span> router <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span>vertx<span class="token punctuation">)</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Hello World from router!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">requestHandler</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样所有的请求会被<code>router</code>拦截，通过<code>route()</code>函数获取所有的请求，然后由指定<code>handler</code>处理。<br>当然，一个路由可以绑定多个<code>handler</code>，按照顺序逐个执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"from router!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Hello World from router2!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>routingContext</code> 中封装了关于这次http请求的所有信息。<br>其中<code>routingContext.request()</code>中是所有的用户请求数据，例如</p><ul><li><code>routingContext.getBody()</code>表示POST、PATCH、PUT请求传递的request参数；</li><li><code>routingContext.request();</code>中包括<code>getParam(String)</code>获取参数，<code>request.getHeader()</code>获取请求头等等功能。</li></ul><p><code>routingContext.response()</code>是对用户请求的响应内容设置。<br>还可以使用<code>order()</code>函数设置<code>handler()</code>处理顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"from router!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Hello World from router2!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码和上面的一段完全等价。需要注意，一个http请求只能<code>response.end()</code>一次，所以需要保证在最后一个路由中返回数据。</p><p>前面的<code>router.route()</code>函数没有指定路由匹配条件。所有的请求都会由被匹配到。如果我们由多个api接口，就需要为路由配置多个匹配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/test/books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求books接口，返回所有的书籍信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/test/books/:id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerRequest</span> request <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请求book接口，返回id为 %s 的书籍"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码表示为router添加两个路由，<code>/test/books</code>和<code>/test/books/:id</code>，匹配相同的uri分别处理。<code>:id</code>为restful风格的浏览器参数。虽然匹配了uri，但是所有到这个uri的请求都会被处理，遵循restful风格的话，我们还需要将请求细化。比如到<code>/test/books</code>的请求，<code>get</code>表示获取所有书籍信息，<code>post</code>表示添加书籍信息；到<code>/test/books/:id</code>的请求是精确到一本书籍的请求，<code>get</code>表示获取这本书籍信息，<code>delete</code>删除书籍信息，<code>put</code>覆盖更新书籍信息，<code>patch</code>增量更新书籍信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/test/books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get方式请求books接口，返回所有的书籍信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/test/books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> bodyAsString <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">getBodyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post方式请求books接口，表示添加书籍信息。请求的post body为："</span> <span class="token operator">+</span> bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>bodyAsString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/test/books/:id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerRequest</span> request <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"get方式请求book接口，返回id为 %s 的书籍"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/test/books/:id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerRequest</span> request <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete方式请求book接口，删除id为 %s 的书籍"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"删除书籍："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/test/books/:id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerRequest</span> request <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"put方式请求book接口，更新id为 %s 的书籍"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JsonObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/test/books/:id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>routingContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServerRequest</span> request <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"patch方式请求book接口，增量id为 %s 的书籍"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServerResponse</span> response <span class="token operator">=</span> routingContext<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JsonObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">putHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    routingContext<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用restful风格api，所有的uri实现内容一目了然。推荐阅读<a href="https://restfulapi.net/">https://restfulapi.net/</a><br>lambda 语法能提高编码和部分执行效率，某种意义上代码也会更加明了。</p></blockquote><h2 id="本文代码链接"><a href="#本文代码链接" class="headerlink" title="本文代码链接"></a>本文代码链接</h2><p><a href="https://github.com/goubo/library-management/tree/ch01">github</a></p><h2 id="以下为吐槽，看到这里就关了吧"><a href="#以下为吐槽，看到这里就关了吧" class="headerlink" title="以下为吐槽，看到这里就关了吧"></a>以下为吐槽，看到这里就关了吧</h2><p>前段时间身体不太好，别人生病都是掉血掉蓝，为啥我感觉自己生病还掉智力呢。。。而且体重也上去了。博客<del>一年多</del>一段时间没有更新了，攒了一部分文章会陆续发出来，顺便换个主题换换心情。<br>前段时间Vert.x发布3.8.0,这次版本迭代改动还是挺大的，不少我以为会在4.0版本发布的内容被提前发布出来了，于是我获得了下面的惊喜。。。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/21/WechatIMG448.png" alt="WechatIMG448"><br></fancybox><br>整个项目都在warning，几百个模块代码都需要重组。。。。<br>不过3.8.0毕竟还是小版本，比较根本的东西并没有改动，加加班也就搞定了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端框架 </category>
          
          <category> Vert.x框架教程《图书馆信息管理系统》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>star UML 3 license</title>
      <link href="posts/aa766f8a/"/>
      <url>posts/aa766f8a/</url>
      
        <content type="html"><![CDATA[<p>前段时间换电脑，之前的部分软件需要重新激活。这里总结一下用到的软件的激活方式，以备不时之需。<br>如果有能力还请支持一下开发者。</p><p><a href="http://staruml.io/">star UML 3</a> 是一个优秀的开源uml工具，是软件设计不可少的工具，但是价格实在是劝退门槛。以前记录的激活方式不能使用了，代码封装成了asar包。查了一下资料，软件仍然使用node js开发，使用asar打包。<a id="more"></a>尝试安装asar解压,获取源码看看能不能找到</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g asar <span class="token comment"># asar使用全局安装，才能使用asar命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到代码包：<code>StarUML.app/Contents/Resources/app.asar</code><br>解压到app文件夹就获取到所有的源码</p><pre class="line-numbers language-none"><code class="language-none">asar extract app.asar app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到文件：<code>./app//src/engine/license-manager.js</code><br>我是通过<code>find ./app/ -name  '*license*'</code>找到的，这算不算起名太规范的弊端（大雾）<br>该文件为验证license的方法。尝试阅读源码。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.** NOTICE:  All information contained herein is, and remains the* property of Minkyu Lee. The intellectual and technical concepts* contained herein are proprietary to Minkyu Lee and may be covered* by Republic of Korea and Foreign Patents, patents in process,* and are protected by trade secret or copyright law.* Dissemination of this information or reproduction of this material* is strictly forbidden unless prior written permission is obtained* from Minkyu Lee (niklaus.lee@gmail.com).**/</span><span class="token keyword">const</span> <span class="token punctuation">{</span>EventEmitter<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token keyword">const</span> UnregisteredDialog <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../dialogs/unregistered-dialog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">SK</span> <span class="token operator">=</span> <span class="token string">'DF9B72CC966FBE3A46F99858C5AEE'</span><span class="token comment">// Check License When File Save</span><span class="token keyword">const</span> <span class="token constant">LICENSE_CHECK_PROBABILITY</span> <span class="token operator">=</span> <span class="token number">0.3</span><span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">var</span> licenseInfo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment">/** * Set Registration Status * This function is out of LicenseManager class for the security reason * (To disable changing License status by API) * @private * @param {boolean} newStat * @return {string} */</span><span class="token keyword">function</span> <span class="token function">setStatus</span> <span class="token punctuation">(</span><span class="token parameter">licenseManager<span class="token punctuation">,</span> newStat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!==</span> newStat<span class="token punctuation">)</span> <span class="token punctuation">{</span>    status <span class="token operator">=</span> newStat    licenseManager<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'statusChanged'</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * @private */</span><span class="token keyword">class</span> <span class="token class-name">LicenseManager</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>projectManager <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * Get Registration Status   * @return {string}   */</span>  <span class="token function">getStatus</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> status  <span class="token punctuation">}</span>  <span class="token comment">/**  * Get License Infomation  * @return {Object}  */</span>  <span class="token function">getLicenseInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> licenseInfo  <span class="token punctuation">}</span>  <span class="token function">findLicense</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> licensePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">getUserPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/license.key'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>licensePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      licensePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">getAppPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'../license.key'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>licensePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> licensePath    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * Check license validity   *   * @return {Promise}   */</span>  <span class="token function">validate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// Local check</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findLicense</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'License key not found'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>          licenseInfo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>          <span class="token keyword">var</span> base <span class="token operator">=</span> <span class="token constant">SK</span> <span class="token operator">+</span> licenseInfo<span class="token punctuation">.</span>name <span class="token operator">+</span>            <span class="token constant">SK</span> <span class="token operator">+</span> licenseInfo<span class="token punctuation">.</span>product <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> licenseInfo<span class="token punctuation">.</span>licenseType <span class="token operator">+</span>            <span class="token constant">SK</span> <span class="token operator">+</span> licenseInfo<span class="token punctuation">.</span>quantity <span class="token operator">+</span>            <span class="token constant">SK</span> <span class="token operator">+</span> licenseInfo<span class="token punctuation">.</span>timestamp <span class="token operator">+</span> <span class="token constant">SK</span>          <span class="token keyword">var</span> _key <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'sha1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>_key <span class="token operator">!==</span> licenseInfo<span class="token punctuation">.</span>licenseKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Invalid license key'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// Server check</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>validation_url<span class="token punctuation">,</span> <span class="token punctuation">{</span>licenseKey<span class="token operator">:</span> licenseInfo<span class="token punctuation">.</span>licenseKey<span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">499</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* License key not exists */</span>                  <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment">// If server is not available, assume that license key is valid</span>                  <span class="token function">resolve</span><span class="token punctuation">(</span>licenseInfo<span class="token punctuation">)</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">checkLicenseValidity</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      UnregisteredDialog<span class="token punctuation">.</span><span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * Check the license key in server and store it as license.key file in local   *   * @param {string} licenseKey   */</span>  <span class="token function">register</span> <span class="token punctuation">(</span><span class="token parameter">licenseKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>validation_url<span class="token punctuation">,</span> <span class="token punctuation">{</span>licenseKey<span class="token operator">:</span> licenseKey<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">getUserPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/license.key'</span><span class="token punctuation">)</span>          fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          licenseInfo <span class="token operator">=</span> data          <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">499</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* License key not exists */</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'invalid'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">htmlReady</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>projectManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'projectSaved'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> project</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> val <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token constant">LICENSE_CHECK_PROBABILITY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkLicenseValidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">appReady</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkLicenseValidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> LicenseManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看<code>validate()</code>方法，验证流程为从本地获取<code>license.key</code>文件，通过hash算法生成key串，通过post方法请求服务器，验证license是否有效。这是验证的主要方法。<br>然后还有<code>checkLicenseValidity()</code>方法，调用<code>validate()</code>方法验证，判断返回调用<code>setStatus()</code>方法，设置license状态。所以我们只要修改这个方法，让它忽视<code>validate()</code>方法的返回，始终调用<code>setStatus()</code>设置成true，应该就能绕过验证。<br>修改代码如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">checkLicenseValidity</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setStatus(this, false)</span>    <span class="token comment">// UnregisteredDialog.showDialog()</span>    <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后按照asar手册，再次打包代码，替换原文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">asar pack app app.asar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动实验成功<br><fancybox><br><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7.png"><br></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 激活码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime text 3 license</title>
      <link href="posts/e36969ff/"/>
      <url>posts/e36969ff/</url>
      
        <content type="html"><![CDATA[<p>sublime text 是一个非常优秀的文本编辑器，即使不付费也能无限期试用，本站收集的license均来自互联网。如果有能力还请支持一下开发者。</p><h2 id="sublime-text-3-3176-license"><a href="#sublime-text-3-3176-license" class="headerlink" title="sublime text 3 3176 license"></a>sublime text 3 3176 license</h2><pre class="line-numbers language-none"><code class="language-none">----- BEGIN LICENSE -----sgbteamSingle User LicenseEA7E-11532598891CBB9 F1513E4F 1A3405C1 A865D53F115F202E 7B91AB2D 0D2A40ED 352B269B76E84F0B CD69BFC7 59F2DFEF E267328F215652A3 E88F9D8F 4C38E3BA 5B2DAAE4969624E7 DC9CD4D5 717FB40C 1B9738CF20B3C4F1 E917B5B3 87C38D9C ACCE7DD85F7EF854 86B9743C FADC04AA FB0DA5C0F913BE58 42FEA319 F954EFDD AE881E0B------ END LICENSE ------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 激活码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 快速排序实现与详解</title>
      <link href="posts/ebe42ec/"/>
      <url>posts/ebe42ec/</url>
      
        <content type="html"><![CDATA[<p>快速排序是一种简单的，常用(被问到)的排序算法。这里讲述一下快速排序的逻辑原理和Java的实现代码。<br>快速排序的思想核心，我认为就是4个字：化繁为简。  </p><blockquote><p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要$O(n \log n )$（大O符号）次比较。在最坏状况下则需要$O(n^2)$次比较，但这种状况并不常见。事实上，快速排序通常明显比其他$O(n \log n )$演算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。<br>以上文字摘自<a href="https://www.wikiwand.com/zh-hans/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">wikiwand-快速排序</a></p></blockquote><a id="more"></a><p>快速排序的原理</p><ol><li>在一个数组中选择一个基准。将所有的元素与这个基准比较，分成大于基准条件，小于基准条件，以及如果有重复的话，还有一个等于基准条件的三个列表。  </li><li>将大于、小于基准的两个列表重复这个操作。直到拆解的数组剩余0或1个元素。  </li><li>将所有拆分的数组，按照顺序进行合并。</li></ol><p>2、3步骤听起来很麻烦，其实如果使用递归的方式来实现这个问题，将会非常简单明了。<br>首先，我们先理解快速排序的方法和原理。<br>假设，我们有一个数组，数组内容为{4,5,3,2,1,6,3}7个元素,并且有一个重复的值。<br>我们找一个基准条件，方便起见，我在这里使用第一个元素作为基准值。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/1.png"></fancybox><br>依次将每个元素与第一个元素比较，比他小的放到第一个集合，与他相同的放到第二个集合，大于他的放到第三个集合。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/2.png"></fancybox><br>这时，将第1、3个集合继续拆分。进行无限重复，直到每个集合都只剩下0个或1个元素。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/3.png"></fancybox></p><p>然后开始合并数据返回。<br>当集合元素小于2时，就不进行拆分了直接向上返回。返回的时候，将三个数组合并起来。<br>首先，是最底下第四层的数组，1，2都只有一个元素，合并后返回上层（1，2）。第三层左边，三个数组中，比基准小的数组就完成了排序。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/4.png"></fancybox><br>然后，第三层左侧的三个数组继续合并，向上返回（1，2，3，3），然后同样合并右侧三个数组，返回（5，6）。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/5.png"></fancybox><br>第二层的左右两个数组都完成了排序，然后三个数组合并返回（1，2，3，3，4，5，6）。完成对整个数组的排序。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/6.png"></fancybox></p><p><code>字丑请见谅😝😝😝😝</code><br>将数组无限分割，直到每个数组都只有1个或0个元素，再将其合并，就完成了数组排序。下面是Java对上图的实现代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequence</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> alist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> blist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> clist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> alist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> blist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> clist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dlist<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">sequence</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dlist<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dlist<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">sequence</span><span class="token punctuation">(</span>blist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dlist<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sequence</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码只是帮助理解快速排序，绝对不能用到实际项目中。如果因为这段代码被群殴，本人概不负责23333</p><p>快速排序的执行速度介于$O(n \log n )$ 至 $O(n^2)$之间。原理也很简单，当每一次取到的基准值都是完美的中间值，左右两个数组会等分原来的数组，数组拆分的深度就会降低（$\log n$次）。当每一次取到的基准值都是集合的最大或最小值是，左右两个集合总有一个是空的。这个拆分的深度就等于数组的长度（$n$次）。</p><p>本文描述的场景包括数据中可能出现重复数据的情况。查了一部分资料，理论描述中不包括重复的数组的情况。这里可能描述的有一些出入，不过思想是一致的。年轻人，研究算法不要太拘泥于形式嘛，*的思想才是重要的嘛。</p><p>化繁为简。简单的四个字并不容易做到，无论生活还是工作，这四个字都能给我们很大的帮助。学会复杂问题简单化，是每个做技术的人有应该有的基本能力。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JShell</title>
      <link href="posts/5d70e24d/"/>
      <url>posts/5d70e24d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jshell是Java9新增的一个实用工具。jshell为Java增加了类似NodeJS和Python中的读取-求值-打印循环（Read-Evaluation-PrintLoop）。在jshell中可以直接输入表达式并查看其执行结果。当需要测试一个方法的运行效果，或是快速的对表达式进行求值时，jshell都非常实用。只需要通过jshell命令启动jshell，然后直接输入表达式即可。每个表达式的结果会被自动保存下来，以数字编号作为引用，类似$1和$2这样的名称。可以在后续的表达式中引用之前语句的运行结果。在jshell中，除了表达式之外，还可以创建Java类和方法。jshell也有基本的代码完成功能。</p></blockquote><a id="more"></a><p>以上摘自<a href="https://www.ibm.com/developerworks/cn/java/the-new-features-of-Java-9/index.html">ibm developerworks</a></p><h2 id="启动jshell"><a href="#启动jshell" class="headerlink" title="启动jshell"></a>启动jshell</h2><p>安装jdk并配置好环境之后，在控制台输入jshell启动</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">BOBOdeRMBP:~ bobo$ java -versionjava version "9"Java(TM) SE Runtime Environment (build 9+181)Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)BOBOdeRMBP:~ bobo$ jshell |  欢迎使用 JShell -- 版本 9|  要大致了解该版本, 请键入: /help introjshell&gt; /help intro|  |  intro|  |  使用 jshell 工具可以执行 Java 代码, 从而立即获取结果。|  您可以输入 Java 定义 (变量, 方法, 类, 等等), 例如:  int x = 8|  或 Java 表达式, 例如:  x + x|  或 Java 语句或导入。|  这些小块的 Java 代码称为 '片段'。|  |  这些 jshell 命令还可以让您了解和|  控制您正在执行的操作, 例如:  /list|  |  有关命令的列表, 请执行: /helpjshell&gt; /help|  键入 Java 语言表达式, 语句或声明。|  或者键入以下命令之一:|  /list [&lt;名称或 id&gt;|-all|-start]|  列出您键入的源|  /edit &lt;名称或 id&gt;|  编辑按名称或 id 引用的源条目|  /drop &lt;名称或 id&gt;|  删除按名称或 id 引用的源条目|  /save [-all|-history|-start] &lt;文件&gt;|  将片段源保存到文件。|  /open &lt;file&gt;|  打开文件作为源输入|  /vars [&lt;名称或 id&gt;|-all|-start]|  列出已声明变量及其值|  /methods [&lt;名称或 id&gt;|-all|-start]|  列出已声明方法及其签名|  /types [&lt;名称或 id&gt;|-all|-start]|  列出已声明的类型|  /imports |  列出导入的项|  /exit |  退出 jshell|  /env [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;] [-add-modules &lt;模块&gt;] ...|  查看或更改评估上下文|  /reset [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;] [-add-modules &lt;模块&gt;]...|  重启 jshell|  /reload [-restore] [-quiet] [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;]...|  重置和重放相关历史记录 -- 当前历史记录或上一个历史记录 (-restore)|  /history |  您键入的内容的历史记录|  /help [&lt;command&gt;|&lt;subject&gt;]|  获取 jshell 的相关信息|  /set editor|start|feedback|mode|prompt|truncation|format ...|  设置 jshell 配置信息|  /? [&lt;command&gt;|&lt;subject&gt;]|  获取 jshell 的相关信息|  /! |  重新运行上一个片段|  /&lt;id&gt; |  按 id 重新运行片段|  /-&lt;n&gt; |  重新运行前面的第 n 个片段|  |  有关详细信息, 请键入 '/help', 后跟|  命令或主题的名称。|  例如 '/help /list' 或 '/help intro'。主题:|  |  intro|  jshell 工具的简介|  shortcuts|  片段和命令输入提示, 信息访问以及|  自动代码生成的按键说明|  context|  /env /reload 和 /reset 的评估上下文选项jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用<a href="/posts/77f46f76/" title="hello-java-9">hello-java-9</a>一文中的代码进行测试，直接使用jshell，不去创建项目，配置maven，打包运行来测试Java9语法新接口和特性。<br>首先我们先测试一下基本功能。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt;  System.out.println("Hello, Java 9, now I am in JShell!")Hello, Java 9, now I am in JShell!jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用包"><a href="#引用包" class="headerlink" title="引用包"></a>引用包</h2><p>使用<code>/imports</code>可以查看已经引用的包，包括默认引用。<br>例如我们要测试LocalDateTime类的方法，需要手动引用java.time包的内容，可以如下手动引用</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; import java.time.*;jshell&gt; /imports |    import java.io.*|    import java.math.*|    import java.net.*|    import java.nio.file.*|    import java.util.*|    import java.util.concurrent.*|    import java.util.function.*|    import java.util.prefs.*|    import java.util.regex.*|    import java.util.stream.*|    import java.time.*jshell&gt; System.out.print(LocalDateTime.now())2018-02-06T15:58:54.532902jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p>jshell提供有命令和代码的自动补全，无论是代码还是命令都可以使用tab键进行提示，这对于快速编写短小的测试代码提高了很大的效率。<br>代码提示：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; LocalDateLocalDate       LocalDateTime   签名:java.time.LocalDate&lt;再次按 Tab 可查看文档&gt;jshell&gt; LocalDatejava.time.LocalDateA date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03 . LocalDate is an immutable date-time object that represents a date, often viewed asyear-month-day. Other date fields, such as day-of-year, day-of-week and week-of-year, can alsobe accessed. For example, the value "2nd October 2007" can be stored in a LocalDate .This class does not store or represent a time or time-zone. Instead, it is a description of thedate, as used for birthdays. It cannot represent an instant on the time-line without additionalinformation such as an offset or time-zone.The ISO-8601 calendar system is the modern civil calendar system used today in most of theworld. It is equivalent to the proleptic Gregorian calendar system, in which today's rules forleap years are applied for all time. For most applications written today, the ISO-8601 rulesare entirely suitable. However, any application that makes use of historical dates, andrequires them to be accurate will find the ISO-8601 approach unsuitable.This is a value-based class; use of identity-sensitive operations (including reference equality( == ), identity hash code, or synchronization) on instances of LocalDate may haveunpredictable results and should be avoided. The equals method should be used for comparisons.jshell&gt; LocalDate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令提示：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; /e/edit    /env     /exit    &lt;再次按 Tab 可查看提要&gt;jshell&gt; /e/edit编辑按名称或 id 引用的源条目/env查看或更改评估上下文/exit退出 jshell&lt;再次按 Tab 可查看完整文档&gt;jshell&gt; /e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h2><ol><li>直接创建类（这里只是演示可支持类、方法的定义，非必须。）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; class Test{}|  已创建 类 Testjshell&gt; class Test{   ...&gt; public void add(int a,int b){System.out.print(a+b);}   ...&gt; }|  已替换 类 Testjshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新定义相同名字的片段会直接覆盖上一个片段。<br>2. 创建对象</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; Test testObj = new Test()testObj ==&gt; Test@6fd02e5jshell&gt; testObj.add(3,4)7jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>直接定义方法、对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">jshell<span class="token operator">&gt;</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span>i <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">5</span>jshell<span class="token operator">&gt;</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">9</span>j <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">9</span>jshell<span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">|</span>  已创建 方法 <span class="token function">product</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> jshell<span class="token operator">&gt;</span> <span class="token function">product</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">45</span>jshell<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>编辑代码片段<br>除了再写一个同名的片段覆盖之前代码外，我们可以使用<code>/edit</code>命令对之前的代码片段进行修改。<br>例如我们定义的product方法输出的是a*b=结果，而Test类的add方法则直接输出的是结果。我们可以修改add方法的输出。<br>先试用/list方法查看所有的片段</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; /list   2 : class Test{       public void add(int a,int b){System.out.print(a+b);}       }   3 : Test testObj = new Test();   4 : testObj.add(3,4)   5 : int i = 5;   6 : int j = 9;   7 : void product(int a,int b){System.out.print(a+"*"+b+"="+(a*b));}   8 : product(i,j)jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用/edge命令可以编辑全部，或指定的片段。<br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/edit-all.png"></fancybox><br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/edit.png"></fancybox><br><fancybox><img src="https://ro7dojex-1259053846.cos.ap-beijing.myqcloud.com/2019/08/20/edit-test.png"></fancybox><br>我们直接在jshell edit pad修改Test类为一下代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击Accept，查看控制台</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; /edit TestException "java.lang.ClassNotFoundException: com/intellij/codeInsight/editorActions/FoldingData"while constructing DataFlavor for: application/x-java-jvm-local-objectref; class=com.intellij.codeInsight.editorActions.FoldingDataException "java.lang.ClassNotFoundException: com/intellij/codeInsight/editorActions/FoldingData"while constructing DataFlavor for: application/x-java-jvm-local-objectref; class=⌘.intellij.codeInsight.editorActions.FoldingDataException "java.lang.ClassNotFoundException: com/intellij/codeInsight/editorActions/ReferenceData"while constructing DataFlavor for: application/x-java-jvm-local-objectref; class=⌘.intellij.codeInsight.editorActions.ReferenceDataException "java.lang.ClassNotFoundException: com/intellij/codeInsight/editorActions/ReferenceData"while constructing DataFlavor for: application/x-java-jvm-local-objectref; class=⌘.intellij.codeInsight.editorActions.ReferenceData|  已修改 类 Testjshell&gt; /list   3 : Test testObj = new Test();   4 : testObj.add(3,4)   5 : int i = 5;   6 : int j = 9;   7 : void product(int a,int b){System.out.print(a+"*"+b+"="+(a*b));}   8 : product(i,j)   9 : class Test {           public void add(int a, int b) {               System.out.print(a + "+" + b + "=" + (a + b));           }       }jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后测试一下修改后的代码</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jshell&gt; product(i,j)5*9=45jshell&gt; testObj.add(i,j)5+9=14jshell&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p><code>/exit</code></p><p>以上就是对jshell的简单介绍，jshell还有更多使用的功能，例如/open命令可以将文件作为输入源等等， 大家可以自己动手实验。<br>使用jshell可以快速执行一些脚本和代码，避免了建项目、打包等冗余操作，还可以快速在远端环境测试一些代码片段，能极大缩短不必要的时间浪费。</p><p><code>小技巧：在shell中，按下回车会立即执行当前代码片段，而有些方法往往需要写好几行，按下shift+enter来换行</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello! Java 9</title>
      <link href="posts/77f46f76/"/>
      <url>posts/77f46f76/</url>
      
        <content type="html"><![CDATA[<p>　　java9正式发布已经有一段时间了，作为一个思想<del>激进</del>__开放__，勇于探索的喵，本着拥抱新特性的心态。<del>第一时间</del>对java的文档进行了拜读，结合这段时间<del>零零散散</del>__持续__的测试和理解，记录下来以后可能会用到的几个特性。<a id="more"></a></p><h2 id="JShell"><a href="#JShell" class="headerlink" title="JShell"></a>JShell</h2><p>Java 9 中引入了交互式编程环境（REPL），这就是JShell。JShell可以执行Java代码，并且立即返回执行结果。可以用来测试一些简单的方法，函数以及算法。本喵或许可以告别创建一个Text.java然后写一个main方法来测试一些函数的做法，使用JShell可以快速地执行代码，节省了项目编译的时间。付出的代价就是需要多多练习脱离IDE码代码的技能了。<br>使用方法：安装好Java9并配置好运行环境后，在命令行输入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">BOBOdeRMBP:~ bobo$ java -versionjava version <span class="token string">"9"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">9</span>+181<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">9</span>+181, mixed mode<span class="token punctuation">)</span>BOBOdeRMBP:~ bobo$ jshell <span class="token operator">|</span>  欢迎使用 JShell -- 版本 <span class="token number">9</span><span class="token operator">|</span>  要大致了解该版本, 请键入: /help introjshell<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可进入JShell。<br>测试一下基本功能。声明一个int类型的变量，并未这个变量赋值。然后打印出变量信息。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jshell<span class="token operator">&gt;</span> int i <span class="token operator">=</span> <span class="token number">10</span>i <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">10</span>jshell<span class="token operator">&gt;</span> System.out.print<span class="token punctuation">(</span><span class="token string">"i:"</span>+i<span class="token punctuation">)</span>i:10jshell<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a href="/posts/5d70e24d/" title="查看更多介绍。。。">查看更多介绍。。。</a><h2 id="不可变集合类的工厂方法"><a href="#不可变集合类的工厂方法" class="headerlink" title="不可变集合类的工厂方法"></a>不可变集合类的工厂方法</h2><p>在处理多线程操作数据时，大多数时候数据线程安全和脏数据问题都会被掩盖。在Java8以及更早版本，我们创建一个不可变集合对象时通常使用Collections.unmodifiableXXX的方法。当我们需要初始化这样一个不可变集合的时候就显得比较麻烦了。<br>在Java9中，Oracle引用了一些非常方便的工厂方法可以用来创建各种不可变集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//空list 9 befor</span><span class="token class-name">List</span> emptylist <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span>EMPTY_LIST<span class="token punctuation">;</span><span class="token comment">//空list 9</span><span class="token class-name">List</span> emptylist9 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非空list 9 befor</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> notEmptylist <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非空list 9</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> notEmptylist9 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空map 9 befor</span><span class="token class-name">Map</span> emptyMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span>EMPTY_MAP<span class="token punctuation">;</span><span class="token comment">//空map 9</span><span class="token class-name">Map</span> emptyMap9 <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非空map 9 befor</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"this is a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"this is b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"this is c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"this is d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> notEmptyMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非空map 9</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map1 <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"this is a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"this is b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"this is c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"this is d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这种写法最大支持10个键值对</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map2 <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">ofEntries</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"this is a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"this is b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"this is c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"this is d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//set略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口的私有方法"><a href="#接口的私有方法" class="headerlink" title="接口的私有方法"></a>接口的私有方法</h2><p>在Java8中，接口中可以定义模式实现和静态方法。但是不能创建私有方法。为了避免冗余代码和提高重用性，Java9现在支持定义私有方法，声明使用的方式与普通类中的一致。进一步提高代码复用率。举个🌰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Dog.java </span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">barking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呜呜呜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//Husky.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Husky</span> <span class="token keyword">implements</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我不哭，我拆家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token function">barking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不管怎么样都疯狂撒欢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//GoldenRetriever.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoldenRetriever</span> <span class="token keyword">implements</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不管怎么样都非常开心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token function">barking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//main.java</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Husky</span> husky <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Husky</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        husky<span class="token punctuation">.</span><span class="token function">sad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        husky<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GoldenRetriever</span> goldenRetriever <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoldenRetriever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goldenRetriever<span class="token punctuation">.</span><span class="token function">sad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goldenRetriever<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.定义Dog接口抽象狗子们的行为。抽象的结果：所有狗子需要玩（play）但是表现不一样。所有狗子都会叫（barking）而且都是“汪汪汪”。<br>狗子们会伤心（sad），大部分狗子伤心都会哭（cry），个别例外。<br>2.具体实现狗子，先实现二哈Husky。二哈伤心的时候是例外，独立实现了伤心的方法。play的实现是撒欢，并且像所有狗子一样叫。然后实现金毛GoldenRetriever。金毛伤心时和大部分狗子一样会哭。play的实现是开心，并且像所有狗子一样叫。<br>叫（barking）是所有对象共有的特征，抽象成接口的静态方法，允许所有的实现内部调用。<br>伤心（sad）是大部分对象的共同特征，可以在接口抽象出默认实现，个例独立实现。<br>哭泣（cry）是内部接口抽取的公共代码，会被伤心（sad）等其它接口内部方法调用。</p><p>Java9的接口允许定义</p><table><thead><tr><th>支持</th><th align="center">是否可外部引用</th><th align="center">是否可实现/重写</th></tr></thead><tbody><tr><td>常量变量</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td>抽象的方法</td><td align="center">❌¿</td><td align="center">✅</td></tr><tr><td>默认的方法</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td>静态方法</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td>私有方法</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td>私有静态方法</td><td align="center">❌</td><td align="center">❌</td></tr></tbody></table><h2 id="Stream增强"><a href="#Stream增强" class="headerlink" title="Stream增强"></a>Stream增强</h2><blockquote><p>Stream作为Java8的一大亮点，它与java.io包里的InputStream和OutputStream是完全不同的概念。它也不同于StAX对XML解析的Stream，也不是AmazonKinesis对大数据实时处理的Stream。Java8中的Stream是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregateoperation），或者大批量数据操作(bulkdataoperation)。StreamAPI借助于同样新出现的Lambda表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用fork/join并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错,但使用StreamAPI无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java8中首次出现的java.util.stream是一个函数式语言+多核时代综合影响的产物</p></blockquote><p>以上摘自<a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/">ibm developerworks</a></p><p>Java9对Stream操作又进行了进一步强化。Stream接口中添加了4个新的方法：dropWhile,takeWhile,ofNullable。还有个iterate方法的新重载方法。<br>iterate的重载方法方法提供了一个Predicate来指定什么时候结束，在Java8中，使用limit方法来约束iterate返回的Stream的长度。下面是三段等价代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dropWhile和takeWhile,废话不多说，直接上代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果</span><span class="token comment">// 123456789123456789</span><span class="token comment">// 56789123456789</span><span class="token comment">// 1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dropWhile和takeWhile和filter方法相似但不相同。<br>filter方法验证Stream中的每一个元素。<br>dropWhile方法对于有序流，从断言指定为true的起始处丢弃元素。当输出条件为小于5时返回true，使用dropWhile会删除前4个元素。对于无序流dropWhile方法的行为是非确定性的。它可以选择删除匹配条件的任何元素子集。当前的实现从匹配元素开始丢弃匹配元素，直到找到不匹配的元素。dropWhile方法有两种极端情况。如果第一个元素与predicate不匹配，则该方法返回原始流。如果所有元素与predicate匹配，则该方法返回一个空流。<br>takeWhile方法的工作方式与dropWhile方法相同，只不过它从流的起始处返回匹配的元素，而丢弃其余的。</p><p>Java8中Stream不能包含null，否则会报空指针异常，而Java9中的ofNullable方法允许我们创建一个单元素Stream，可以包含一个非空元素，也可以创建一个空Stream。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"hello，world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jshell 执行结果 1</span>stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jshell 执行结果 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改进应用安全性能"><a href="#改进应用安全性能" class="headerlink" title="改进应用安全性能"></a>改进应用安全性能</h2><p>Java9新增了4个SHA-3哈希算法，SHA3-224、SHA3-256、SHA3-384和SHA3-512。另外也增加了通过java.security.SecureRandom生成使用DRBG算法的强随机数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">MessageDigest</span> instance <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA3-224"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Hex</span><span class="token punctuation">.</span><span class="token function">encodeHexString</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="进程API"><a href="#进程API" class="headerlink" title="进程API"></a>进程API</h2><p>Java9增加了ProcessHandle接口，可以对原生进程进行管理，尤其适合于管理长时间运行的进程。在使用ProcessBuilder来启动一个进程之后，可以通过Process.toHandle()方法来得到一个ProcessHandle对象的实例。通过ProcessHandle可以获取到由ProcessHandle.Info表示的进程的基本信息，如命令行参数、可执行文件路径和启动时间等。ProcessHandle的onExit()方法返回一个CompletableFuture<processhandle>对象，可以在进程结束时执行自定义的动作。代码清单8中给出了进程API的使用示例。</processhandle></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"top"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">inheritIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token class-name">ProcessHandle</span> processHandle <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> processHandle<span class="token punctuation">.</span><span class="token function">onExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">pid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上简单说一下Java9中语法的新特性，Java9的特性还包括Project Jigsaw(平台模块系统),http 2,I/O流新特性等等。后面本喵会逐步理解分析Java9中优秀的概念设计，希望能尽快享受Java9带来的工作便利。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vertx的Hello World!</title>
      <link href="posts/a0ca4f3a/"/>
      <url>posts/a0ca4f3a/</url>
      
        <content type="html"><![CDATA[<p>由于Vert.x目前“火爆”的人气，使用各种搜索引擎都能找到大量的社区网站、博客来介绍vertx各种概念。这里就不再啰嗦了。本喵从今天开始，使用实际的代码来展示实际工作中可能会遇到的一些问题。以及解决方案。如果你有在使用Vert.x，并且遇到了一些问题，欢迎留言讨论。使用的架构模式，是本喵在实际生产中自己搭建的一个单机框架（分布式简化而来）。  <a id="more"></a><br>代码方面，主要以实际代码为主，简单讲解框架的各个功能及实现方式。需要详细了解的请移步<a href="http://vertx.io/" title="Vert.x官网">Vert.x官网</a>，如果有什么没有提到的想要了解，欢迎留言或邮件本喵。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Vert.x</title>
      <link href="posts/246cc011/"/>
      <url>posts/246cc011/</url>
      
        <content type="html"><![CDATA[<p>两年前在公司开始负责一个底层api的项目。包含功能很简单，对接底层系统进行封装，提供一些功能实现的封装，对外提供http restful接口。主要要求是支持高并发和高稳定性。最开始的选型是用一些轻量级的http server框架。然后集成spring、mybatis等传统框架实现，后来了解了一个叫做Vert.x的nio框架。进行尝试并且经过了漫长的适应期之后。本喵只有一句话。Vert.x即是正义！</p><a id="more"></a><h2 id="What（is-Vert-x）"><a href="#What（is-Vert-x）" class="headerlink" title="What（is Vert.x）"></a>What（is Vert.x）</h2><blockquote><p><strong>Eclipse Vert.x is a tool-kit for building reactive applications on the JVM.</strong><a href="http://vertx.io/">1</a></p></blockquote><h2 id="Who（to-use-Vert-x）"><a href="#Who（to-use-Vert-x）" class="headerlink" title="Who（to use Vert.x）"></a>Who（to use Vert.x）</h2><p>Vert.x是一个相对比较新技术。主要的资料来源还是Vert.x的官网。国内陆续也有大量的Vert.x用户。各个社交平台也有一些交流群等。<br>本喵学习使用Vert.x框架满打满算差不多13个月左右，目前使用Vert.x搭建一个相对稳定的框架投入生产使用。目前还有大量的问题。做这网站的目的，主要是整理一下学习Vert.x的过程，再次详细分析一下Vert.x以及具体的使用方法。达到对Vert.x更加深入的了解。主要以自己搭建的单个项目的框架展开。能力一般水平有限。一边分析，一边改进，希望看到这篇文章的大家能多多提出建议。<br>本喵在学习Vert.x的过程中，对于无力问题的解决方案主要来源于几个地方：</p><ol><li>Vert.x 官网。 </li><li>Vert.x 粉丝群。</li><li>Google</li></ol><h2 id="Why（to-use-Vert-x）"><a href="#Why（to-use-Vert-x）" class="headerlink" title="Why（to use Vert.x）"></a>Why（to use Vert.x）</h2><p>Vert.x是一个基于JVM、轻量级、高性能的应用平台，非常适用于最新的移动端后台、互联网、企业应用架构。基于netty的nio全异步架构，Vert.x能够非常简单提供高并发，高扩展性的服务架构。<br>Vert.x的优点：</p><ul><li>同时支持多种编程语言<br>目前已经支持了Java、JavaScript、Ruby、Python、Groovy、Clojure、Ceylon等。对程序员来说，直接好处就是可以使用各种语言丰富的LIB，同时也不再为编程语言选型而纠结</li><li>异步无锁编程<br>Vert.x提供了十分友好的异步无锁编程，在实际编码过程中使用由框架提供的各种异步实现方便快捷。比如查询数据库<pre class="line-numbers language-java" data-language="java"><code class="language-java">jdbcClient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">,</span> result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ResultSet</span> result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//.......</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"select error:"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//......</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>对于各种IO的异步支持<br>目前Vert.x的异步模型已支持TCP、UDP、FileSystem、DNS、EventBus、Sockjs等；</li><li>非常方便的分布式支持<br>基于EventBus事件总线的消息机制，每个模块都是一个绝对独立的项目。轻松编写出分布式解藕应用。</li><li>生态圈日益丰富<br>本喵使用最初接触Vert.x较晚，截止这遍博客，Vert.x已发布3.5正式版。Vert.x已经有了相对非常完善的基于异步驱动的Data access（Postgres、MySQL、MongoDB、Redis）、Microservices、MQTT、Authentication等模块。</li></ul><p>接下来本喵主要会列举一下本喵在项目中实际的用法和遇到的一些问题。更多的资料还是推荐大家查看官方文档和源码分析。(部分更新内容文档描述可能不太实时，所以当时踩了无数的喵爪坑)。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Vert.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过java使用ffmpeg录制rtmp视频流，文件无法读取</title>
      <link href="posts/acbf2d1c/"/>
      <url>posts/acbf2d1c/</url>
      
        <content type="html"><![CDATA[<p>前段时间项目有一个录制rtmp流生成文件的需求，使用ffmpeg软件录制输出本地文件，再使用ffprobe读取视频文件信息保存到数据库。<br>当时遇到一个问题，部分文件录制完后，数据库中没有保存文件信息。<a id="more"></a>经过日志分析，这部分文件在使用ffprobe读取时，抛出了<code>Invalid data found when processing input</code>。老司机一看就知道，八成是读取文件信息的时候，写入还没有完成。程序在读取文件时，确定录制是已经停止的，这种小问题，加个延时应该就解决了。于是在调用读取的地方，添加了一个定时。调用停止录制2000毫秒后再读取硬盘上的文件信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//发现录制应该结束</span><span class="token class-name">Process</span> cmd <span class="token operator">=</span> <span class="token class-name">FFmpegProcessUtil</span><span class="token punctuation">.</span><span class="token function">getFFmpegProcessUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRecord</span><span class="token punctuation">(</span>streamName<span class="token punctuation">)</span><span class="token punctuation">;</span>cmd<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vertx<span class="token punctuation">.</span><span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span>id<span class="token operator">-&gt;</span><span class="token punctuation">{</span>    <span class="token class-name">FFmpegProbeResult</span> probe <span class="token operator">=</span> <span class="token class-name">ShellUtil</span><span class="token punctuation">.</span><span class="token function">probe</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ffprobe_path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保存文件信息</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而周冬雨眉头一皱，发现事情并不简单。【此处应有图，原谅我图床还没选好😂😂😂】<br>前两天部门一小哥说录制文件找不到。分析日志仍然是<code>Invalid data found when processing input</code>。感觉我之前的想法确实有点简单了。<br>而且小哥分析日志后，发现读取错误的文件其实是有共同点的。<br>这个record程序的流程如下。<br>使用一个定时器，每秒钟扫描nginx-rtmp端口。发现有数据流就加载到缓存中，提供外部接口，由上层业务系统调用接口控制录制的开始和关闭。ffmpeg录制结束有两个节点。</p><ol><li>上层业务系统调用接口停止录制。</li><li>定时器扫描到nginx端口不存在这个数据流，停止录制。</li></ol><p>小哥发现：所有读取错误的文件，均是第二种方式停止的录制。<br>经测试。在使用如下命令转存文件时，及时输入端数据已经终止，ffmpeg进程仍然存在。<br><code>ffmpeg -i rtmp://&lt;ip&gt;/live/streamName -f mp4 test.mp4</code><br>本地调试代码后发现当定时器检测到nginx端口的流已经不存在时，调用Process.destroy()方法并不能立即终止进程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">vertx<span class="token punctuation">.</span><span class="token function">setPeriodic</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RefreshStreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>RefreshStreamHandler.java</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//其它未失效数据处理</span>    loseMapKey<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>streamName <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//其它处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lostMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>streamName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLcFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发现流结束时仍然有录制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Process</span> cmd <span class="token operator">=</span> <span class="token class-name">FFmpegProcessUtil</span><span class="token punctuation">.</span><span class="token function">getFFmpegProcessUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRecord</span><span class="token punctuation">(</span>streamName<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FFmpegProbeResult</span> probe <span class="token operator">=</span> <span class="token class-name">ShellUtil</span><span class="token punctuation">.</span><span class="token function">probe</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ffprobe_path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存文件信息</span>        <span class="token punctuation">}</span>        <span class="token comment">//其它处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我在logger.info行添加断点调试时发现就算destroy()执行成功后。ffmpeg进程仍然存在，直到整个handle处理完成之后ffmpeg才消失。<br>于是对代码做了如下调整。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">vertx<span class="token punctuation">.</span><span class="token function">setPeriodic</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RefreshStreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vertx<span class="token punctuation">.</span><span class="token function">setPeriodic</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//其它未失效数据处理</span>    loseMapKey<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>streamName <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//其它处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lostMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>streamName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLcFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发现流结束时仍然有录制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Process</span> cmd <span class="token operator">=</span> <span class="token class-name">FFmpegProcessUtil</span><span class="token punctuation">.</span><span class="token function">getFFmpegProcessUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRecord</span><span class="token punctuation">(</span>streamName<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            recordList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">//其它处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><div class="caption"><span><filehandler.java></filehandler.java></span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Long</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>recordList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">insertFile</span><span class="token punctuation">(</span>recordList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>recordList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用另一个定时器去查找文件，由于两个定时器同时执行，当扫描端口的定时器查询到流结束时将流标识添加到list中，本次同时执行的文件扫描定时器因为已经执行完成，所以只能在下个周期处理当前周期添加到list中的任务。本地测试后放到服务器，检验OK。</p><p>代码表面的问题已经解决，但是更深入的原理的仍然困扰着我。rtmp源地址没有断的情况下，使用destroy()方法后立即查询文件详情为什么没有问题？ffmpeg为何会在handle()方法执行完成后就会停止？Runtimer执行shell的时候，Process和进程之间的关系等等。。。</p><p><code>要学的东西还有很多。留个坑，以后一定会补上后面三个问题</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> rtmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My first one</title>
      <link href="posts/20fa54d6/"/>
      <url>posts/20fa54d6/</url>
      
        <content type="html"><![CDATA[<p>毕业好几年了，陆陆续续下好几次想要搭建自己的博客，都因为种种原因搁浅了。<br>17年年底，回首过去的浑浑噩噩，觉得是时候总结一波了。<br>这个站点会在接下来以技术为主，其它为辅。先总结之前积攒下的经验，现在用到的技术。以及记录以后的学习过程。</p><blockquote><p>学无止尽，今天停下脚步休息总结，只是为以后能更快的前进</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
